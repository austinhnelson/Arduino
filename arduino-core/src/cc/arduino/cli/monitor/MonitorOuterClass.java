// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: monitor/monitor.proto

package cc.arduino.cli.monitor;

public final class MonitorOuterClass {
  private MonitorOuterClass() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  public interface StreamingOpenReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cc.arduino.cli.monitor.StreamingOpenReq)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     * @return Whether the monitorConfig field is set.
     */
    boolean hasMonitorConfig();
    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     * @return The monitorConfig.
     */
    cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getMonitorConfig();
    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     */
    cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder getMonitorConfigOrBuilder();

    /**
     * <pre>
     * The data to be sent to the target being monitored.
     * </pre>
     *
     * <code>bytes data = 2;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();

    public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.ContentCase getContentCase();
  }
  /**
   * <pre>
   * The top-level message sent by the client for the `StreamingOpen` method.
   * Multiple `StreamingOpenReq` messages can be sent but the first message
   * must contain a `monitor_config` message to initialize the monitor target.
   * All subsequent messages must contain bytes to be sent to the target
   * and must not contain a `monitor_config` message.
   * </pre>
   *
   * Protobuf type {@code cc.arduino.cli.monitor.StreamingOpenReq}
   */
  public  static final class StreamingOpenReq extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cc.arduino.cli.monitor.StreamingOpenReq)
      StreamingOpenReqOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StreamingOpenReq.newBuilder() to construct.
    private StreamingOpenReq(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StreamingOpenReq() {
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StreamingOpenReq();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StreamingOpenReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder subBuilder = null;
              if (contentCase_ == 1) {
                subBuilder = ((cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_).toBuilder();
              }
              content_ =
                  input.readMessage(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom((cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_);
                content_ = subBuilder.buildPartial();
              }
              contentCase_ = 1;
              break;
            }
            case 18: {
              contentCase_ = 2;
              content_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.class, cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.Builder.class);
    }

    private int contentCase_ = 0;
    private java.lang.Object content_;
    public enum ContentCase
        implements com.google.protobuf.Internal.EnumLite,
            com.google.protobuf.AbstractMessage.InternalOneOfEnum {
      MONITORCONFIG(1),
      DATA(2),
      CONTENT_NOT_SET(0);
      private final int value;
      private ContentCase(int value) {
        this.value = value;
      }
      /**
       * @param value The number of the enum to look for.
       * @return The enum associated with the given number.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static ContentCase valueOf(int value) {
        return forNumber(value);
      }

      public static ContentCase forNumber(int value) {
        switch (value) {
          case 1: return MONITORCONFIG;
          case 2: return DATA;
          case 0: return CONTENT_NOT_SET;
          default: return null;
        }
      }
      public int getNumber() {
        return this.value;
      }
    };

    public ContentCase
    getContentCase() {
      return ContentCase.forNumber(
          contentCase_);
    }

    public static final int MONITORCONFIG_FIELD_NUMBER = 1;
    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     * @return Whether the monitorConfig field is set.
     */
    public boolean hasMonitorConfig() {
      return contentCase_ == 1;
    }
    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     * @return The monitorConfig.
     */
    public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getMonitorConfig() {
      if (contentCase_ == 1) {
         return (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_;
      }
      return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
    }
    /**
     * <pre>
     * Provides information to the monitor that specifies which is the target.
     * The first `StreamingOpenReq` message must contain a `monitor_config`
     * message.
     * </pre>
     *
     * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
     */
    public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder getMonitorConfigOrBuilder() {
      if (contentCase_ == 1) {
         return (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_;
      }
      return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
    }

    public static final int DATA_FIELD_NUMBER = 2;
    /**
     * <pre>
     * The data to be sent to the target being monitored.
     * </pre>
     *
     * <code>bytes data = 2;</code>
     * @return The data.
     */
    public com.google.protobuf.ByteString getData() {
      if (contentCase_ == 2) {
        return (com.google.protobuf.ByteString) content_;
      }
      return com.google.protobuf.ByteString.EMPTY;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (contentCase_ == 1) {
        output.writeMessage(1, (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_);
      }
      if (contentCase_ == 2) {
        output.writeBytes(
            2, (com.google.protobuf.ByteString) content_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (contentCase_ == 1) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_);
      }
      if (contentCase_ == 2) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(
              2, (com.google.protobuf.ByteString) content_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq)) {
        return super.equals(obj);
      }
      cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq other = (cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq) obj;

      if (!getContentCase().equals(other.getContentCase())) return false;
      switch (contentCase_) {
        case 1:
          if (!getMonitorConfig()
              .equals(other.getMonitorConfig())) return false;
          break;
        case 2:
          if (!getData()
              .equals(other.getData())) return false;
          break;
        case 0:
        default:
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      switch (contentCase_) {
        case 1:
          hash = (37 * hash) + MONITORCONFIG_FIELD_NUMBER;
          hash = (53 * hash) + getMonitorConfig().hashCode();
          break;
        case 2:
          hash = (37 * hash) + DATA_FIELD_NUMBER;
          hash = (53 * hash) + getData().hashCode();
          break;
        case 0:
        default:
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * The top-level message sent by the client for the `StreamingOpen` method.
     * Multiple `StreamingOpenReq` messages can be sent but the first message
     * must contain a `monitor_config` message to initialize the monitor target.
     * All subsequent messages must contain bytes to be sent to the target
     * and must not contain a `monitor_config` message.
     * </pre>
     *
     * Protobuf type {@code cc.arduino.cli.monitor.StreamingOpenReq}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cc.arduino.cli.monitor.StreamingOpenReq)
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.class, cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.Builder.class);
      }

      // Construct using cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        contentCase_ = 0;
        content_ = null;
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq getDefaultInstanceForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.getDefaultInstance();
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq build() {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq buildPartial() {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq result = new cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq(this);
        if (contentCase_ == 1) {
          if (monitorConfigBuilder_ == null) {
            result.content_ = content_;
          } else {
            result.content_ = monitorConfigBuilder_.build();
          }
        }
        if (contentCase_ == 2) {
          result.content_ = content_;
        }
        result.contentCase_ = contentCase_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq) {
          return mergeFrom((cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq other) {
        if (other == cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq.getDefaultInstance()) return this;
        switch (other.getContentCase()) {
          case MONITORCONFIG: {
            mergeMonitorConfig(other.getMonitorConfig());
            break;
          }
          case DATA: {
            setData(other.getData());
            break;
          }
          case CONTENT_NOT_SET: {
            break;
          }
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int contentCase_ = 0;
      private java.lang.Object content_;
      public ContentCase
          getContentCase() {
        return ContentCase.forNumber(
            contentCase_);
      }

      public Builder clearContent() {
        contentCase_ = 0;
        content_ = null;
        onChanged();
        return this;
      }


      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder> monitorConfigBuilder_;
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       * @return Whether the monitorConfig field is set.
       */
      public boolean hasMonitorConfig() {
        return contentCase_ == 1;
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       * @return The monitorConfig.
       */
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getMonitorConfig() {
        if (monitorConfigBuilder_ == null) {
          if (contentCase_ == 1) {
            return (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_;
          }
          return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
        } else {
          if (contentCase_ == 1) {
            return monitorConfigBuilder_.getMessage();
          }
          return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public Builder setMonitorConfig(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig value) {
        if (monitorConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          content_ = value;
          onChanged();
        } else {
          monitorConfigBuilder_.setMessage(value);
        }
        contentCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public Builder setMonitorConfig(
          cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder builderForValue) {
        if (monitorConfigBuilder_ == null) {
          content_ = builderForValue.build();
          onChanged();
        } else {
          monitorConfigBuilder_.setMessage(builderForValue.build());
        }
        contentCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public Builder mergeMonitorConfig(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig value) {
        if (monitorConfigBuilder_ == null) {
          if (contentCase_ == 1 &&
              content_ != cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance()) {
            content_ = cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.newBuilder((cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_)
                .mergeFrom(value).buildPartial();
          } else {
            content_ = value;
          }
          onChanged();
        } else {
          if (contentCase_ == 1) {
            monitorConfigBuilder_.mergeFrom(value);
          }
          monitorConfigBuilder_.setMessage(value);
        }
        contentCase_ = 1;
        return this;
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public Builder clearMonitorConfig() {
        if (monitorConfigBuilder_ == null) {
          if (contentCase_ == 1) {
            contentCase_ = 0;
            content_ = null;
            onChanged();
          }
        } else {
          if (contentCase_ == 1) {
            contentCase_ = 0;
            content_ = null;
          }
          monitorConfigBuilder_.clear();
        }
        return this;
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder getMonitorConfigBuilder() {
        return getMonitorConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder getMonitorConfigOrBuilder() {
        if ((contentCase_ == 1) && (monitorConfigBuilder_ != null)) {
          return monitorConfigBuilder_.getMessageOrBuilder();
        } else {
          if (contentCase_ == 1) {
            return (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_;
          }
          return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
        }
      }
      /**
       * <pre>
       * Provides information to the monitor that specifies which is the target.
       * The first `StreamingOpenReq` message must contain a `monitor_config`
       * message.
       * </pre>
       *
       * <code>.cc.arduino.cli.monitor.MonitorConfig monitorConfig = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder> 
          getMonitorConfigFieldBuilder() {
        if (monitorConfigBuilder_ == null) {
          if (!(contentCase_ == 1)) {
            content_ = cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
          }
          monitorConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder>(
                  (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) content_,
                  getParentForChildren(),
                  isClean());
          content_ = null;
        }
        contentCase_ = 1;
        onChanged();;
        return monitorConfigBuilder_;
      }

      /**
       * <pre>
       * The data to be sent to the target being monitored.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @return The data.
       */
      public com.google.protobuf.ByteString getData() {
        if (contentCase_ == 2) {
          return (com.google.protobuf.ByteString) content_;
        }
        return com.google.protobuf.ByteString.EMPTY;
      }
      /**
       * <pre>
       * The data to be sent to the target being monitored.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  contentCase_ = 2;
        content_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The data to be sent to the target being monitored.
       * </pre>
       *
       * <code>bytes data = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        if (contentCase_ == 2) {
          contentCase_ = 0;
          content_ = null;
          onChanged();
        }
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cc.arduino.cli.monitor.StreamingOpenReq)
    }

    // @@protoc_insertion_point(class_scope:cc.arduino.cli.monitor.StreamingOpenReq)
    private static final cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq();
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StreamingOpenReq>
        PARSER = new com.google.protobuf.AbstractParser<StreamingOpenReq>() {
      @java.lang.Override
      public StreamingOpenReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StreamingOpenReq(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StreamingOpenReq> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StreamingOpenReq> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface MonitorConfigOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cc.arduino.cli.monitor.MonitorConfig)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The target name.
     * </pre>
     *
     * <code>string target = 1;</code>
     * @return The target.
     */
    java.lang.String getTarget();
    /**
     * <pre>
     * The target name.
     * </pre>
     *
     * <code>string target = 1;</code>
     * @return The bytes for target.
     */
    com.google.protobuf.ByteString
        getTargetBytes();

    /**
     * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    int getTypeValue();
    /**
     * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
     * @return The type.
     */
    cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType getType();

    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     * @return Whether the additionalConfig field is set.
     */
    boolean hasAdditionalConfig();
    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     * @return The additionalConfig.
     */
    com.google.protobuf.Struct getAdditionalConfig();
    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     */
    com.google.protobuf.StructOrBuilder getAdditionalConfigOrBuilder();
  }
  /**
   * <pre>
   * Tells the monitor which target to open and provides additional parameters
   * that might be needed to configure the target or the monitor itself.
   * </pre>
   *
   * Protobuf type {@code cc.arduino.cli.monitor.MonitorConfig}
   */
  public  static final class MonitorConfig extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cc.arduino.cli.monitor.MonitorConfig)
      MonitorConfigOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use MonitorConfig.newBuilder() to construct.
    private MonitorConfig(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private MonitorConfig() {
      target_ = "";
      type_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new MonitorConfig();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private MonitorConfig(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              java.lang.String s = input.readStringRequireUtf8();

              target_ = s;
              break;
            }
            case 16: {
              int rawValue = input.readEnum();

              type_ = rawValue;
              break;
            }
            case 26: {
              com.google.protobuf.Struct.Builder subBuilder = null;
              if (additionalConfig_ != null) {
                subBuilder = additionalConfig_.toBuilder();
              }
              additionalConfig_ = input.readMessage(com.google.protobuf.Struct.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(additionalConfig_);
                additionalConfig_ = subBuilder.buildPartial();
              }

              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_MonitorConfig_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.class, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder.class);
    }

    /**
     * Protobuf enum {@code cc.arduino.cli.monitor.MonitorConfig.TargetType}
     */
    public enum TargetType
        implements com.google.protobuf.ProtocolMessageEnum {
      /**
       * <code>SERIAL = 0;</code>
       */
      SERIAL(0),
      UNRECOGNIZED(-1),
      ;

      /**
       * <code>SERIAL = 0;</code>
       */
      public static final int SERIAL_VALUE = 0;


      public final int getNumber() {
        if (this == UNRECOGNIZED) {
          throw new java.lang.IllegalArgumentException(
              "Can't get the number of an unknown enum value.");
        }
        return value;
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       * @deprecated Use {@link #forNumber(int)} instead.
       */
      @java.lang.Deprecated
      public static TargetType valueOf(int value) {
        return forNumber(value);
      }

      /**
       * @param value The numeric wire value of the corresponding enum entry.
       * @return The enum associated with the given numeric wire value.
       */
      public static TargetType forNumber(int value) {
        switch (value) {
          case 0: return SERIAL;
          default: return null;
        }
      }

      public static com.google.protobuf.Internal.EnumLiteMap<TargetType>
          internalGetValueMap() {
        return internalValueMap;
      }
      private static final com.google.protobuf.Internal.EnumLiteMap<
          TargetType> internalValueMap =
            new com.google.protobuf.Internal.EnumLiteMap<TargetType>() {
              public TargetType findValueByNumber(int number) {
                return TargetType.forNumber(number);
              }
            };

      public final com.google.protobuf.Descriptors.EnumValueDescriptor
          getValueDescriptor() {
        return getDescriptor().getValues().get(ordinal());
      }
      public final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptorForType() {
        return getDescriptor();
      }
      public static final com.google.protobuf.Descriptors.EnumDescriptor
          getDescriptor() {
        return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDescriptor().getEnumTypes().get(0);
      }

      private static final TargetType[] VALUES = values();

      public static TargetType valueOf(
          com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
        if (desc.getType() != getDescriptor()) {
          throw new java.lang.IllegalArgumentException(
            "EnumValueDescriptor is not for this type.");
        }
        if (desc.getIndex() == -1) {
          return UNRECOGNIZED;
        }
        return VALUES[desc.getIndex()];
      }

      private final int value;

      private TargetType(int value) {
        this.value = value;
      }

      // @@protoc_insertion_point(enum_scope:cc.arduino.cli.monitor.MonitorConfig.TargetType)
    }

    public static final int TARGET_FIELD_NUMBER = 1;
    private volatile java.lang.Object target_;
    /**
     * <pre>
     * The target name.
     * </pre>
     *
     * <code>string target = 1;</code>
     * @return The target.
     */
    public java.lang.String getTarget() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        target_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The target name.
     * </pre>
     *
     * <code>string target = 1;</code>
     * @return The bytes for target.
     */
    public com.google.protobuf.ByteString
        getTargetBytes() {
      java.lang.Object ref = target_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        target_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int TYPE_FIELD_NUMBER = 2;
    private int type_;
    /**
     * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
     * @return The enum numeric value on the wire for type.
     */
    public int getTypeValue() {
      return type_;
    }
    /**
     * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
     * @return The type.
     */
    public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType getType() {
      @SuppressWarnings("deprecation")
      cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType result = cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.valueOf(type_);
      return result == null ? cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.UNRECOGNIZED : result;
    }

    public static final int ADDITIONALCONFIG_FIELD_NUMBER = 3;
    private com.google.protobuf.Struct additionalConfig_;
    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     * @return Whether the additionalConfig field is set.
     */
    public boolean hasAdditionalConfig() {
      return additionalConfig_ != null;
    }
    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     * @return The additionalConfig.
     */
    public com.google.protobuf.Struct getAdditionalConfig() {
      return additionalConfig_ == null ? com.google.protobuf.Struct.getDefaultInstance() : additionalConfig_;
    }
    /**
     * <pre>
     * Additional parameters that might be needed to configure the target or the
     * monitor itself.
     * </pre>
     *
     * <code>.google.protobuf.Struct additionalConfig = 3;</code>
     */
    public com.google.protobuf.StructOrBuilder getAdditionalConfigOrBuilder() {
      return getAdditionalConfig();
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!getTargetBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 1, target_);
      }
      if (type_ != cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.SERIAL.getNumber()) {
        output.writeEnum(2, type_);
      }
      if (additionalConfig_ != null) {
        output.writeMessage(3, getAdditionalConfig());
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!getTargetBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(1, target_);
      }
      if (type_ != cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.SERIAL.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(2, type_);
      }
      if (additionalConfig_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getAdditionalConfig());
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig)) {
        return super.equals(obj);
      }
      cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig other = (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) obj;

      if (!getTarget()
          .equals(other.getTarget())) return false;
      if (type_ != other.type_) return false;
      if (hasAdditionalConfig() != other.hasAdditionalConfig()) return false;
      if (hasAdditionalConfig()) {
        if (!getAdditionalConfig()
            .equals(other.getAdditionalConfig())) return false;
      }
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + TARGET_FIELD_NUMBER;
      hash = (53 * hash) + getTarget().hashCode();
      hash = (37 * hash) + TYPE_FIELD_NUMBER;
      hash = (53 * hash) + type_;
      if (hasAdditionalConfig()) {
        hash = (37 * hash) + ADDITIONALCONFIG_FIELD_NUMBER;
        hash = (53 * hash) + getAdditionalConfig().hashCode();
      }
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * Tells the monitor which target to open and provides additional parameters
     * that might be needed to configure the target or the monitor itself.
     * </pre>
     *
     * Protobuf type {@code cc.arduino.cli.monitor.MonitorConfig}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cc.arduino.cli.monitor.MonitorConfig)
        cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfigOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_MonitorConfig_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.class, cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.Builder.class);
      }

      // Construct using cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        target_ = "";

        type_ = 0;

        if (additionalConfigBuilder_ == null) {
          additionalConfig_ = null;
        } else {
          additionalConfig_ = null;
          additionalConfigBuilder_ = null;
        }
        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getDefaultInstanceForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance();
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig build() {
        cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig buildPartial() {
        cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig result = new cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig(this);
        result.target_ = target_;
        result.type_ = type_;
        if (additionalConfigBuilder_ == null) {
          result.additionalConfig_ = additionalConfig_;
        } else {
          result.additionalConfig_ = additionalConfigBuilder_.build();
        }
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) {
          return mergeFrom((cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig other) {
        if (other == cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.getDefaultInstance()) return this;
        if (!other.getTarget().isEmpty()) {
          target_ = other.target_;
          onChanged();
        }
        if (other.type_ != 0) {
          setTypeValue(other.getTypeValue());
        }
        if (other.hasAdditionalConfig()) {
          mergeAdditionalConfig(other.getAdditionalConfig());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private java.lang.Object target_ = "";
      /**
       * <pre>
       * The target name.
       * </pre>
       *
       * <code>string target = 1;</code>
       * @return The target.
       */
      public java.lang.String getTarget() {
        java.lang.Object ref = target_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          target_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The target name.
       * </pre>
       *
       * <code>string target = 1;</code>
       * @return The bytes for target.
       */
      public com.google.protobuf.ByteString
          getTargetBytes() {
        java.lang.Object ref = target_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          target_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The target name.
       * </pre>
       *
       * <code>string target = 1;</code>
       * @param value The target to set.
       * @return This builder for chaining.
       */
      public Builder setTarget(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        target_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target name.
       * </pre>
       *
       * <code>string target = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearTarget() {
        
        target_ = getDefaultInstance().getTarget();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The target name.
       * </pre>
       *
       * <code>string target = 1;</code>
       * @param value The bytes for target to set.
       * @return This builder for chaining.
       */
      public Builder setTargetBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        target_ = value;
        onChanged();
        return this;
      }

      private int type_ = 0;
      /**
       * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
       * @return The enum numeric value on the wire for type.
       */
      public int getTypeValue() {
        return type_;
      }
      /**
       * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
       * @param value The enum numeric value on the wire for type to set.
       * @return This builder for chaining.
       */
      public Builder setTypeValue(int value) {
        type_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
       * @return The type.
       */
      public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType getType() {
        @SuppressWarnings("deprecation")
        cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType result = cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.valueOf(type_);
        return result == null ? cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType.UNRECOGNIZED : result;
      }
      /**
       * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
       * @param value The type to set.
       * @return This builder for chaining.
       */
      public Builder setType(cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig.TargetType value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        type_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cc.arduino.cli.monitor.MonitorConfig.TargetType type = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearType() {
        
        type_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.Struct additionalConfig_;
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> additionalConfigBuilder_;
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       * @return Whether the additionalConfig field is set.
       */
      public boolean hasAdditionalConfig() {
        return additionalConfigBuilder_ != null || additionalConfig_ != null;
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       * @return The additionalConfig.
       */
      public com.google.protobuf.Struct getAdditionalConfig() {
        if (additionalConfigBuilder_ == null) {
          return additionalConfig_ == null ? com.google.protobuf.Struct.getDefaultInstance() : additionalConfig_;
        } else {
          return additionalConfigBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public Builder setAdditionalConfig(com.google.protobuf.Struct value) {
        if (additionalConfigBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          additionalConfig_ = value;
          onChanged();
        } else {
          additionalConfigBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public Builder setAdditionalConfig(
          com.google.protobuf.Struct.Builder builderForValue) {
        if (additionalConfigBuilder_ == null) {
          additionalConfig_ = builderForValue.build();
          onChanged();
        } else {
          additionalConfigBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public Builder mergeAdditionalConfig(com.google.protobuf.Struct value) {
        if (additionalConfigBuilder_ == null) {
          if (additionalConfig_ != null) {
            additionalConfig_ =
              com.google.protobuf.Struct.newBuilder(additionalConfig_).mergeFrom(value).buildPartial();
          } else {
            additionalConfig_ = value;
          }
          onChanged();
        } else {
          additionalConfigBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public Builder clearAdditionalConfig() {
        if (additionalConfigBuilder_ == null) {
          additionalConfig_ = null;
          onChanged();
        } else {
          additionalConfig_ = null;
          additionalConfigBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public com.google.protobuf.Struct.Builder getAdditionalConfigBuilder() {
        
        onChanged();
        return getAdditionalConfigFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      public com.google.protobuf.StructOrBuilder getAdditionalConfigOrBuilder() {
        if (additionalConfigBuilder_ != null) {
          return additionalConfigBuilder_.getMessageOrBuilder();
        } else {
          return additionalConfig_ == null ?
              com.google.protobuf.Struct.getDefaultInstance() : additionalConfig_;
        }
      }
      /**
       * <pre>
       * Additional parameters that might be needed to configure the target or the
       * monitor itself.
       * </pre>
       *
       * <code>.google.protobuf.Struct additionalConfig = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder> 
          getAdditionalConfigFieldBuilder() {
        if (additionalConfigBuilder_ == null) {
          additionalConfigBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              com.google.protobuf.Struct, com.google.protobuf.Struct.Builder, com.google.protobuf.StructOrBuilder>(
                  getAdditionalConfig(),
                  getParentForChildren(),
                  isClean());
          additionalConfig_ = null;
        }
        return additionalConfigBuilder_;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cc.arduino.cli.monitor.MonitorConfig)
    }

    // @@protoc_insertion_point(class_scope:cc.arduino.cli.monitor.MonitorConfig)
    private static final cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig();
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<MonitorConfig>
        PARSER = new com.google.protobuf.AbstractParser<MonitorConfig>() {
      @java.lang.Override
      public MonitorConfig parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MonitorConfig(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<MonitorConfig> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<MonitorConfig> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cc.arduino.cli.monitor.MonitorOuterClass.MonitorConfig getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface StreamingOpenRespOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cc.arduino.cli.monitor.StreamingOpenResp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The data received from the target.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    com.google.protobuf.ByteString getData();
  }
  /**
   * <pre>
   * </pre>
   *
   * Protobuf type {@code cc.arduino.cli.monitor.StreamingOpenResp}
   */
  public  static final class StreamingOpenResp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cc.arduino.cli.monitor.StreamingOpenResp)
      StreamingOpenRespOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use StreamingOpenResp.newBuilder() to construct.
    private StreamingOpenResp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private StreamingOpenResp() {
      data_ = com.google.protobuf.ByteString.EMPTY;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new StreamingOpenResp();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private StreamingOpenResp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              data_ = input.readBytes();
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenResp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.class, cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.Builder.class);
    }

    public static final int DATA_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString data_;
    /**
     * <pre>
     * The data received from the target.
     * </pre>
     *
     * <code>bytes data = 1;</code>
     * @return The data.
     */
    public com.google.protobuf.ByteString getData() {
      return data_;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!data_.isEmpty()) {
        output.writeBytes(1, data_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!data_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, data_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp)) {
        return super.equals(obj);
      }
      cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp other = (cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp) obj;

      if (!getData()
          .equals(other.getData())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + DATA_FIELD_NUMBER;
      hash = (53 * hash) + getData().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * <pre>
     * </pre>
     *
     * Protobuf type {@code cc.arduino.cli.monitor.StreamingOpenResp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cc.arduino.cli.monitor.StreamingOpenResp)
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenRespOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenResp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.class, cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.Builder.class);
      }

      // Construct using cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        data_ = com.google.protobuf.ByteString.EMPTY;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp getDefaultInstanceForType() {
        return cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.getDefaultInstance();
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp build() {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp buildPartial() {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp result = new cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp(this);
        result.data_ = data_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp) {
          return mergeFrom((cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp other) {
        if (other == cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp.getDefaultInstance()) return this;
        if (other.getData() != com.google.protobuf.ByteString.EMPTY) {
          setData(other.getData());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString data_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The data received from the target.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return The data.
       */
      public com.google.protobuf.ByteString getData() {
        return data_;
      }
      /**
       * <pre>
       * The data received from the target.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @param value The data to set.
       * @return This builder for chaining.
       */
      public Builder setData(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        data_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The data received from the target.
       * </pre>
       *
       * <code>bytes data = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearData() {
        
        data_ = getDefaultInstance().getData();
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cc.arduino.cli.monitor.StreamingOpenResp)
    }

    // @@protoc_insertion_point(class_scope:cc.arduino.cli.monitor.StreamingOpenResp)
    private static final cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp();
    }

    public static cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<StreamingOpenResp>
        PARSER = new com.google.protobuf.AbstractParser<StreamingOpenResp>() {
      @java.lang.Override
      public StreamingOpenResp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new StreamingOpenResp(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<StreamingOpenResp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<StreamingOpenResp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cc.arduino.cli.monitor.MonitorOuterClass.StreamingOpenResp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cc_arduino_cli_monitor_StreamingOpenReq_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cc_arduino_cli_monitor_MonitorConfig_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cc_arduino_cli_monitor_StreamingOpenResp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\025monitor/monitor.proto\022\026cc.arduino.cli." +
      "monitor\032\034google/protobuf/struct.proto\"m\n" +
      "\020StreamingOpenReq\022>\n\rmonitorConfig\030\001 \001(\013" +
      "2%.cc.arduino.cli.monitor.MonitorConfigH" +
      "\000\022\016\n\004data\030\002 \001(\014H\000B\t\n\007content\"\254\001\n\rMonitor" +
      "Config\022\016\n\006target\030\001 \001(\t\022>\n\004type\030\002 \001(\01620.c" +
      "c.arduino.cli.monitor.MonitorConfig.Targ" +
      "etType\0221\n\020additionalConfig\030\003 \001(\0132\027.googl" +
      "e.protobuf.Struct\"\030\n\nTargetType\022\n\n\006SERIA" +
      "L\020\000\"!\n\021StreamingOpenResp\022\014\n\004data\030\001 \001(\0142u" +
      "\n\007Monitor\022j\n\rStreamingOpen\022(.cc.arduino." +
      "cli.monitor.StreamingOpenReq\032).cc.arduin" +
      "o.cli.monitor.StreamingOpenResp\"\000(\0010\001B,Z" +
      "*github.com/arduino/arduino-cli/rpc/moni" +
      "torb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          com.google.protobuf.StructProto.getDescriptor(),
        });
    internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cc_arduino_cli_monitor_StreamingOpenReq_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cc_arduino_cli_monitor_StreamingOpenReq_descriptor,
        new java.lang.String[] { "MonitorConfig", "Data", "Content", });
    internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_cc_arduino_cli_monitor_MonitorConfig_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cc_arduino_cli_monitor_MonitorConfig_descriptor,
        new java.lang.String[] { "Target", "Type", "AdditionalConfig", });
    internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_cc_arduino_cli_monitor_StreamingOpenResp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cc_arduino_cli_monitor_StreamingOpenResp_descriptor,
        new java.lang.String[] { "Data", });
    com.google.protobuf.StructProto.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
