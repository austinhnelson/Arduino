// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: commands/compile.proto

package cc.arduino.cli.commands;

public final class Compile {
  private Compile() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistryLite registry) {
  }

  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
    registerAllExtensions(
        (com.google.protobuf.ExtensionRegistryLite) registry);
  }
  /**
   * Protobuf enum {@code cc.arduino.cli.commands.CompileResult}
   */
  public enum CompileResult
      implements com.google.protobuf.ProtocolMessageEnum {
    /**
     * <code>compile_success = 0;</code>
     */
    compile_success(0),
    /**
     * <code>compile_error = 1;</code>
     */
    compile_error(1),
    UNRECOGNIZED(-1),
    ;

    /**
     * <code>compile_success = 0;</code>
     */
    public static final int compile_success_VALUE = 0;
    /**
     * <code>compile_error = 1;</code>
     */
    public static final int compile_error_VALUE = 1;


    public final int getNumber() {
      if (this == UNRECOGNIZED) {
        throw new java.lang.IllegalArgumentException(
            "Can't get the number of an unknown enum value.");
      }
      return value;
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     * @deprecated Use {@link #forNumber(int)} instead.
     */
    @java.lang.Deprecated
    public static CompileResult valueOf(int value) {
      return forNumber(value);
    }

    /**
     * @param value The numeric wire value of the corresponding enum entry.
     * @return The enum associated with the given numeric wire value.
     */
    public static CompileResult forNumber(int value) {
      switch (value) {
        case 0: return compile_success;
        case 1: return compile_error;
        default: return null;
      }
    }

    public static com.google.protobuf.Internal.EnumLiteMap<CompileResult>
        internalGetValueMap() {
      return internalValueMap;
    }
    private static final com.google.protobuf.Internal.EnumLiteMap<
        CompileResult> internalValueMap =
          new com.google.protobuf.Internal.EnumLiteMap<CompileResult>() {
            public CompileResult findValueByNumber(int number) {
              return CompileResult.forNumber(number);
            }
          };

    public final com.google.protobuf.Descriptors.EnumValueDescriptor
        getValueDescriptor() {
      return getDescriptor().getValues().get(ordinal());
    }
    public final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptorForType() {
      return getDescriptor();
    }
    public static final com.google.protobuf.Descriptors.EnumDescriptor
        getDescriptor() {
      return cc.arduino.cli.commands.Compile.getDescriptor().getEnumTypes().get(0);
    }

    private static final CompileResult[] VALUES = values();

    public static CompileResult valueOf(
        com.google.protobuf.Descriptors.EnumValueDescriptor desc) {
      if (desc.getType() != getDescriptor()) {
        throw new java.lang.IllegalArgumentException(
          "EnumValueDescriptor is not for this type.");
      }
      if (desc.getIndex() == -1) {
        return UNRECOGNIZED;
      }
      return VALUES[desc.getIndex()];
    }

    private final int value;

    private CompileResult(int value) {
      this.value = value;
    }

    // @@protoc_insertion_point(enum_scope:cc.arduino.cli.commands.CompileResult)
  }

  public interface CompileReqOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cc.arduino.cli.commands.CompileReq)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     * @return Whether the instance field is set.
     */
    boolean hasInstance();
    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     * @return The instance.
     */
    cc.arduino.cli.commands.Common.Instance getInstance();
    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     */
    cc.arduino.cli.commands.Common.InstanceOrBuilder getInstanceOrBuilder();

    /**
     * <pre>
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
     * </pre>
     *
     * <code>string fqbn = 2;</code>
     * @return The fqbn.
     */
    java.lang.String getFqbn();
    /**
     * <pre>
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
     * </pre>
     *
     * <code>string fqbn = 2;</code>
     * @return The bytes for fqbn.
     */
    com.google.protobuf.ByteString
        getFqbnBytes();

    /**
     * <pre>
     * The path where the sketch is stored.
     * </pre>
     *
     * <code>string sketchPath = 3;</code>
     * @return The sketchPath.
     */
    java.lang.String getSketchPath();
    /**
     * <pre>
     * The path where the sketch is stored.
     * </pre>
     *
     * <code>string sketchPath = 3;</code>
     * @return The bytes for sketchPath.
     */
    com.google.protobuf.ByteString
        getSketchPathBytes();

    /**
     * <pre>
     * Show all build preferences used instead of compiling.
     * </pre>
     *
     * <code>bool showProperties = 4;</code>
     * @return The showProperties.
     */
    boolean getShowProperties();

    /**
     * <pre>
     * Print preprocessed code to stdout instead of compiling.
     * </pre>
     *
     * <code>bool preprocess = 5;</code>
     * @return The preprocess.
     */
    boolean getPreprocess();

    /**
     * <pre>
     * Builds of 'core.a' are saved into this path to be cached and reused.
     * </pre>
     *
     * <code>string buildCachePath = 6;</code>
     * @return The buildCachePath.
     */
    java.lang.String getBuildCachePath();
    /**
     * <pre>
     * Builds of 'core.a' are saved into this path to be cached and reused.
     * </pre>
     *
     * <code>string buildCachePath = 6;</code>
     * @return The bytes for buildCachePath.
     */
    com.google.protobuf.ByteString
        getBuildCachePathBytes();

    /**
     * <pre>
     * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
     * </pre>
     *
     * <code>string buildPath = 7;</code>
     * @return The buildPath.
     */
    java.lang.String getBuildPath();
    /**
     * <pre>
     * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
     * </pre>
     *
     * <code>string buildPath = 7;</code>
     * @return The bytes for buildPath.
     */
    com.google.protobuf.ByteString
        getBuildPathBytes();

    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @return A list containing the buildProperties.
     */
    java.util.List<java.lang.String>
        getBuildPropertiesList();
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @return The count of buildProperties.
     */
    int getBuildPropertiesCount();
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @param index The index of the element to return.
     * @return The buildProperties at the given index.
     */
    java.lang.String getBuildProperties(int index);
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the buildProperties at the given index.
     */
    com.google.protobuf.ByteString
        getBuildPropertiesBytes(int index);

    /**
     * <pre>
     * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
     * </pre>
     *
     * <code>string warnings = 9;</code>
     * @return The warnings.
     */
    java.lang.String getWarnings();
    /**
     * <pre>
     * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
     * </pre>
     *
     * <code>string warnings = 9;</code>
     * @return The bytes for warnings.
     */
    com.google.protobuf.ByteString
        getWarningsBytes();

    /**
     * <pre>
     * Turns on verbose mode.
     * </pre>
     *
     * <code>bool verbose = 10;</code>
     * @return The verbose.
     */
    boolean getVerbose();

    /**
     * <pre>
     * Suppresses almost every output.
     * </pre>
     *
     * <code>bool quiet = 11;</code>
     * @return The quiet.
     */
    boolean getQuiet();

    /**
     * <pre>
     * VID/PID specific build properties.
     * </pre>
     *
     * <code>string vidPid = 12;</code>
     * @return The vidPid.
     */
    java.lang.String getVidPid();
    /**
     * <pre>
     * VID/PID specific build properties.
     * </pre>
     *
     * <code>string vidPid = 12;</code>
     * @return The bytes for vidPid.
     */
    com.google.protobuf.ByteString
        getVidPidBytes();

    /**
     * <pre>
     * DEPRECATED: use exportDir instead
     * </pre>
     *
     * <code>string exportFile = 13 [deprecated = true];</code>
     * @return The exportFile.
     */
    @java.lang.Deprecated java.lang.String getExportFile();
    /**
     * <pre>
     * DEPRECATED: use exportDir instead
     * </pre>
     *
     * <code>string exportFile = 13 [deprecated = true];</code>
     * @return The bytes for exportFile.
     */
    @java.lang.Deprecated com.google.protobuf.ByteString
        getExportFileBytes();

    /**
     * <pre>
     * The max number of concurrent compiler instances to run (as `make -jx`). If jobs is set to 0, it will use the number of available CPUs as the maximum.
     * </pre>
     *
     * <code>int32 jobs = 14;</code>
     * @return The jobs.
     */
    int getJobs();

    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @return A list containing the libraries.
     */
    java.util.List<java.lang.String>
        getLibrariesList();
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @return The count of libraries.
     */
    int getLibrariesCount();
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @param index The index of the element to return.
     * @return The libraries at the given index.
     */
    java.lang.String getLibraries(int index);
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @param index The index of the value to return.
     * @return The bytes of the libraries at the given index.
     */
    com.google.protobuf.ByteString
        getLibrariesBytes(int index);

    /**
     * <pre>
     * Optimize compile output for debug, not for release.
     * </pre>
     *
     * <code>bool optimizeForDebug = 16;</code>
     * @return The optimizeForDebug.
     */
    boolean getOptimizeForDebug();

    /**
     * <pre>
     * When set to `true` the compiled binary will not be copied to the export directory.
     * </pre>
     *
     * <code>bool dryRun = 17;</code>
     * @return The dryRun.
     */
    boolean getDryRun();

    /**
     * <pre>
     * Optional: save the build artifacts in this directory, the directory must exist.
     * </pre>
     *
     * <code>string export_dir = 18;</code>
     * @return The exportDir.
     */
    java.lang.String getExportDir();
    /**
     * <pre>
     * Optional: save the build artifacts in this directory, the directory must exist.
     * </pre>
     *
     * <code>string export_dir = 18;</code>
     * @return The bytes for exportDir.
     */
    com.google.protobuf.ByteString
        getExportDirBytes();

    /**
     * <pre>
     * External programmer for upload
     * </pre>
     *
     * <code>string programmer = 19;</code>
     * @return The programmer.
     */
    java.lang.String getProgrammer();
    /**
     * <pre>
     * External programmer for upload
     * </pre>
     *
     * <code>string programmer = 19;</code>
     * @return The bytes for programmer.
     */
    com.google.protobuf.ByteString
        getProgrammerBytes();
  }
  /**
   * Protobuf type {@code cc.arduino.cli.commands.CompileReq}
   */
  public  static final class CompileReq extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cc.arduino.cli.commands.CompileReq)
      CompileReqOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompileReq.newBuilder() to construct.
    private CompileReq(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompileReq() {
      fqbn_ = "";
      sketchPath_ = "";
      buildCachePath_ = "";
      buildPath_ = "";
      buildProperties_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      warnings_ = "";
      vidPid_ = "";
      exportFile_ = "";
      libraries_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      exportDir_ = "";
      programmer_ = "";
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompileReq();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CompileReq(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {
              cc.arduino.cli.commands.Common.Instance.Builder subBuilder = null;
              if (instance_ != null) {
                subBuilder = instance_.toBuilder();
              }
              instance_ = input.readMessage(cc.arduino.cli.commands.Common.Instance.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(instance_);
                instance_ = subBuilder.buildPartial();
              }

              break;
            }
            case 18: {
              java.lang.String s = input.readStringRequireUtf8();

              fqbn_ = s;
              break;
            }
            case 26: {
              java.lang.String s = input.readStringRequireUtf8();

              sketchPath_ = s;
              break;
            }
            case 32: {

              showProperties_ = input.readBool();
              break;
            }
            case 40: {

              preprocess_ = input.readBool();
              break;
            }
            case 50: {
              java.lang.String s = input.readStringRequireUtf8();

              buildCachePath_ = s;
              break;
            }
            case 58: {
              java.lang.String s = input.readStringRequireUtf8();

              buildPath_ = s;
              break;
            }
            case 66: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000001) != 0)) {
                buildProperties_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000001;
              }
              buildProperties_.add(s);
              break;
            }
            case 74: {
              java.lang.String s = input.readStringRequireUtf8();

              warnings_ = s;
              break;
            }
            case 80: {

              verbose_ = input.readBool();
              break;
            }
            case 88: {

              quiet_ = input.readBool();
              break;
            }
            case 98: {
              java.lang.String s = input.readStringRequireUtf8();

              vidPid_ = s;
              break;
            }
            case 106: {
              java.lang.String s = input.readStringRequireUtf8();

              exportFile_ = s;
              break;
            }
            case 112: {

              jobs_ = input.readInt32();
              break;
            }
            case 122: {
              java.lang.String s = input.readStringRequireUtf8();
              if (!((mutable_bitField0_ & 0x00000002) != 0)) {
                libraries_ = new com.google.protobuf.LazyStringArrayList();
                mutable_bitField0_ |= 0x00000002;
              }
              libraries_.add(s);
              break;
            }
            case 128: {

              optimizeForDebug_ = input.readBool();
              break;
            }
            case 136: {

              dryRun_ = input.readBool();
              break;
            }
            case 146: {
              java.lang.String s = input.readStringRequireUtf8();

              exportDir_ = s;
              break;
            }
            case 154: {
              java.lang.String s = input.readStringRequireUtf8();

              programmer_ = s;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000001) != 0)) {
          buildProperties_ = buildProperties_.getUnmodifiableView();
        }
        if (((mutable_bitField0_ & 0x00000002) != 0)) {
          libraries_ = libraries_.getUnmodifiableView();
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileReq_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileReq_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cc.arduino.cli.commands.Compile.CompileReq.class, cc.arduino.cli.commands.Compile.CompileReq.Builder.class);
    }

    public static final int INSTANCE_FIELD_NUMBER = 1;
    private cc.arduino.cli.commands.Common.Instance instance_;
    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     * @return Whether the instance field is set.
     */
    public boolean hasInstance() {
      return instance_ != null;
    }
    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     * @return The instance.
     */
    public cc.arduino.cli.commands.Common.Instance getInstance() {
      return instance_ == null ? cc.arduino.cli.commands.Common.Instance.getDefaultInstance() : instance_;
    }
    /**
     * <pre>
     * Arduino Core Service instance from the `Init` response.
     * </pre>
     *
     * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
     */
    public cc.arduino.cli.commands.Common.InstanceOrBuilder getInstanceOrBuilder() {
      return getInstance();
    }

    public static final int FQBN_FIELD_NUMBER = 2;
    private volatile java.lang.Object fqbn_;
    /**
     * <pre>
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
     * </pre>
     *
     * <code>string fqbn = 2;</code>
     * @return The fqbn.
     */
    public java.lang.String getFqbn() {
      java.lang.Object ref = fqbn_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        fqbn_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
     * </pre>
     *
     * <code>string fqbn = 2;</code>
     * @return The bytes for fqbn.
     */
    public com.google.protobuf.ByteString
        getFqbnBytes() {
      java.lang.Object ref = fqbn_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        fqbn_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SKETCHPATH_FIELD_NUMBER = 3;
    private volatile java.lang.Object sketchPath_;
    /**
     * <pre>
     * The path where the sketch is stored.
     * </pre>
     *
     * <code>string sketchPath = 3;</code>
     * @return The sketchPath.
     */
    public java.lang.String getSketchPath() {
      java.lang.Object ref = sketchPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        sketchPath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * The path where the sketch is stored.
     * </pre>
     *
     * <code>string sketchPath = 3;</code>
     * @return The bytes for sketchPath.
     */
    public com.google.protobuf.ByteString
        getSketchPathBytes() {
      java.lang.Object ref = sketchPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        sketchPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int SHOWPROPERTIES_FIELD_NUMBER = 4;
    private boolean showProperties_;
    /**
     * <pre>
     * Show all build preferences used instead of compiling.
     * </pre>
     *
     * <code>bool showProperties = 4;</code>
     * @return The showProperties.
     */
    public boolean getShowProperties() {
      return showProperties_;
    }

    public static final int PREPROCESS_FIELD_NUMBER = 5;
    private boolean preprocess_;
    /**
     * <pre>
     * Print preprocessed code to stdout instead of compiling.
     * </pre>
     *
     * <code>bool preprocess = 5;</code>
     * @return The preprocess.
     */
    public boolean getPreprocess() {
      return preprocess_;
    }

    public static final int BUILDCACHEPATH_FIELD_NUMBER = 6;
    private volatile java.lang.Object buildCachePath_;
    /**
     * <pre>
     * Builds of 'core.a' are saved into this path to be cached and reused.
     * </pre>
     *
     * <code>string buildCachePath = 6;</code>
     * @return The buildCachePath.
     */
    public java.lang.String getBuildCachePath() {
      java.lang.Object ref = buildCachePath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        buildCachePath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Builds of 'core.a' are saved into this path to be cached and reused.
     * </pre>
     *
     * <code>string buildCachePath = 6;</code>
     * @return The bytes for buildCachePath.
     */
    public com.google.protobuf.ByteString
        getBuildCachePathBytes() {
      java.lang.Object ref = buildCachePath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        buildCachePath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BUILDPATH_FIELD_NUMBER = 7;
    private volatile java.lang.Object buildPath_;
    /**
     * <pre>
     * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
     * </pre>
     *
     * <code>string buildPath = 7;</code>
     * @return The buildPath.
     */
    public java.lang.String getBuildPath() {
      java.lang.Object ref = buildPath_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        buildPath_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
     * </pre>
     *
     * <code>string buildPath = 7;</code>
     * @return The bytes for buildPath.
     */
    public com.google.protobuf.ByteString
        getBuildPathBytes() {
      java.lang.Object ref = buildPath_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        buildPath_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int BUILDPROPERTIES_FIELD_NUMBER = 8;
    private com.google.protobuf.LazyStringList buildProperties_;
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @return A list containing the buildProperties.
     */
    public com.google.protobuf.ProtocolStringList
        getBuildPropertiesList() {
      return buildProperties_;
    }
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @return The count of buildProperties.
     */
    public int getBuildPropertiesCount() {
      return buildProperties_.size();
    }
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @param index The index of the element to return.
     * @return The buildProperties at the given index.
     */
    public java.lang.String getBuildProperties(int index) {
      return buildProperties_.get(index);
    }
    /**
     * <pre>
     * List of custom build properties separated by commas.
     * </pre>
     *
     * <code>repeated string buildProperties = 8;</code>
     * @param index The index of the value to return.
     * @return The bytes of the buildProperties at the given index.
     */
    public com.google.protobuf.ByteString
        getBuildPropertiesBytes(int index) {
      return buildProperties_.getByteString(index);
    }

    public static final int WARNINGS_FIELD_NUMBER = 9;
    private volatile java.lang.Object warnings_;
    /**
     * <pre>
     * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
     * </pre>
     *
     * <code>string warnings = 9;</code>
     * @return The warnings.
     */
    public java.lang.String getWarnings() {
      java.lang.Object ref = warnings_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        warnings_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
     * </pre>
     *
     * <code>string warnings = 9;</code>
     * @return The bytes for warnings.
     */
    public com.google.protobuf.ByteString
        getWarningsBytes() {
      java.lang.Object ref = warnings_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        warnings_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int VERBOSE_FIELD_NUMBER = 10;
    private boolean verbose_;
    /**
     * <pre>
     * Turns on verbose mode.
     * </pre>
     *
     * <code>bool verbose = 10;</code>
     * @return The verbose.
     */
    public boolean getVerbose() {
      return verbose_;
    }

    public static final int QUIET_FIELD_NUMBER = 11;
    private boolean quiet_;
    /**
     * <pre>
     * Suppresses almost every output.
     * </pre>
     *
     * <code>bool quiet = 11;</code>
     * @return The quiet.
     */
    public boolean getQuiet() {
      return quiet_;
    }

    public static final int VIDPID_FIELD_NUMBER = 12;
    private volatile java.lang.Object vidPid_;
    /**
     * <pre>
     * VID/PID specific build properties.
     * </pre>
     *
     * <code>string vidPid = 12;</code>
     * @return The vidPid.
     */
    public java.lang.String getVidPid() {
      java.lang.Object ref = vidPid_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        vidPid_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * VID/PID specific build properties.
     * </pre>
     *
     * <code>string vidPid = 12;</code>
     * @return The bytes for vidPid.
     */
    public com.google.protobuf.ByteString
        getVidPidBytes() {
      java.lang.Object ref = vidPid_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        vidPid_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int EXPORTFILE_FIELD_NUMBER = 13;
    private volatile java.lang.Object exportFile_;
    /**
     * <pre>
     * DEPRECATED: use exportDir instead
     * </pre>
     *
     * <code>string exportFile = 13 [deprecated = true];</code>
     * @return The exportFile.
     */
    @java.lang.Deprecated public java.lang.String getExportFile() {
      java.lang.Object ref = exportFile_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        exportFile_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * DEPRECATED: use exportDir instead
     * </pre>
     *
     * <code>string exportFile = 13 [deprecated = true];</code>
     * @return The bytes for exportFile.
     */
    @java.lang.Deprecated public com.google.protobuf.ByteString
        getExportFileBytes() {
      java.lang.Object ref = exportFile_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        exportFile_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int JOBS_FIELD_NUMBER = 14;
    private int jobs_;
    /**
     * <pre>
     * The max number of concurrent compiler instances to run (as `make -jx`). If jobs is set to 0, it will use the number of available CPUs as the maximum.
     * </pre>
     *
     * <code>int32 jobs = 14;</code>
     * @return The jobs.
     */
    public int getJobs() {
      return jobs_;
    }

    public static final int LIBRARIES_FIELD_NUMBER = 15;
    private com.google.protobuf.LazyStringList libraries_;
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @return A list containing the libraries.
     */
    public com.google.protobuf.ProtocolStringList
        getLibrariesList() {
      return libraries_;
    }
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @return The count of libraries.
     */
    public int getLibrariesCount() {
      return libraries_.size();
    }
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @param index The index of the element to return.
     * @return The libraries at the given index.
     */
    public java.lang.String getLibraries(int index) {
      return libraries_.get(index);
    }
    /**
     * <pre>
     * List of custom libraries paths separated by commas.
     * </pre>
     *
     * <code>repeated string libraries = 15;</code>
     * @param index The index of the value to return.
     * @return The bytes of the libraries at the given index.
     */
    public com.google.protobuf.ByteString
        getLibrariesBytes(int index) {
      return libraries_.getByteString(index);
    }

    public static final int OPTIMIZEFORDEBUG_FIELD_NUMBER = 16;
    private boolean optimizeForDebug_;
    /**
     * <pre>
     * Optimize compile output for debug, not for release.
     * </pre>
     *
     * <code>bool optimizeForDebug = 16;</code>
     * @return The optimizeForDebug.
     */
    public boolean getOptimizeForDebug() {
      return optimizeForDebug_;
    }

    public static final int DRYRUN_FIELD_NUMBER = 17;
    private boolean dryRun_;
    /**
     * <pre>
     * When set to `true` the compiled binary will not be copied to the export directory.
     * </pre>
     *
     * <code>bool dryRun = 17;</code>
     * @return The dryRun.
     */
    public boolean getDryRun() {
      return dryRun_;
    }

    public static final int EXPORT_DIR_FIELD_NUMBER = 18;
    private volatile java.lang.Object exportDir_;
    /**
     * <pre>
     * Optional: save the build artifacts in this directory, the directory must exist.
     * </pre>
     *
     * <code>string export_dir = 18;</code>
     * @return The exportDir.
     */
    public java.lang.String getExportDir() {
      java.lang.Object ref = exportDir_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        exportDir_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * Optional: save the build artifacts in this directory, the directory must exist.
     * </pre>
     *
     * <code>string export_dir = 18;</code>
     * @return The bytes for exportDir.
     */
    public com.google.protobuf.ByteString
        getExportDirBytes() {
      java.lang.Object ref = exportDir_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        exportDir_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int PROGRAMMER_FIELD_NUMBER = 19;
    private volatile java.lang.Object programmer_;
    /**
     * <pre>
     * External programmer for upload
     * </pre>
     *
     * <code>string programmer = 19;</code>
     * @return The programmer.
     */
    public java.lang.String getProgrammer() {
      java.lang.Object ref = programmer_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        programmer_ = s;
        return s;
      }
    }
    /**
     * <pre>
     * External programmer for upload
     * </pre>
     *
     * <code>string programmer = 19;</code>
     * @return The bytes for programmer.
     */
    public com.google.protobuf.ByteString
        getProgrammerBytes() {
      java.lang.Object ref = programmer_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        programmer_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (instance_ != null) {
        output.writeMessage(1, getInstance());
      }
      if (!getFqbnBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 2, fqbn_);
      }
      if (!getSketchPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 3, sketchPath_);
      }
      if (showProperties_ != false) {
        output.writeBool(4, showProperties_);
      }
      if (preprocess_ != false) {
        output.writeBool(5, preprocess_);
      }
      if (!getBuildCachePathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 6, buildCachePath_);
      }
      if (!getBuildPathBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 7, buildPath_);
      }
      for (int i = 0; i < buildProperties_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 8, buildProperties_.getRaw(i));
      }
      if (!getWarningsBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 9, warnings_);
      }
      if (verbose_ != false) {
        output.writeBool(10, verbose_);
      }
      if (quiet_ != false) {
        output.writeBool(11, quiet_);
      }
      if (!getVidPidBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 12, vidPid_);
      }
      if (!getExportFileBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 13, exportFile_);
      }
      if (jobs_ != 0) {
        output.writeInt32(14, jobs_);
      }
      for (int i = 0; i < libraries_.size(); i++) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 15, libraries_.getRaw(i));
      }
      if (optimizeForDebug_ != false) {
        output.writeBool(16, optimizeForDebug_);
      }
      if (dryRun_ != false) {
        output.writeBool(17, dryRun_);
      }
      if (!getExportDirBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 18, exportDir_);
      }
      if (!getProgrammerBytes().isEmpty()) {
        com.google.protobuf.GeneratedMessageV3.writeString(output, 19, programmer_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (instance_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, getInstance());
      }
      if (!getFqbnBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(2, fqbn_);
      }
      if (!getSketchPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(3, sketchPath_);
      }
      if (showProperties_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(4, showProperties_);
      }
      if (preprocess_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(5, preprocess_);
      }
      if (!getBuildCachePathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(6, buildCachePath_);
      }
      if (!getBuildPathBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(7, buildPath_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < buildProperties_.size(); i++) {
          dataSize += computeStringSizeNoTag(buildProperties_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getBuildPropertiesList().size();
      }
      if (!getWarningsBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(9, warnings_);
      }
      if (verbose_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(10, verbose_);
      }
      if (quiet_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(11, quiet_);
      }
      if (!getVidPidBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(12, vidPid_);
      }
      if (!getExportFileBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(13, exportFile_);
      }
      if (jobs_ != 0) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(14, jobs_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < libraries_.size(); i++) {
          dataSize += computeStringSizeNoTag(libraries_.getRaw(i));
        }
        size += dataSize;
        size += 1 * getLibrariesList().size();
      }
      if (optimizeForDebug_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(16, optimizeForDebug_);
      }
      if (dryRun_ != false) {
        size += com.google.protobuf.CodedOutputStream
          .computeBoolSize(17, dryRun_);
      }
      if (!getExportDirBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(18, exportDir_);
      }
      if (!getProgrammerBytes().isEmpty()) {
        size += com.google.protobuf.GeneratedMessageV3.computeStringSize(19, programmer_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cc.arduino.cli.commands.Compile.CompileReq)) {
        return super.equals(obj);
      }
      cc.arduino.cli.commands.Compile.CompileReq other = (cc.arduino.cli.commands.Compile.CompileReq) obj;

      if (hasInstance() != other.hasInstance()) return false;
      if (hasInstance()) {
        if (!getInstance()
            .equals(other.getInstance())) return false;
      }
      if (!getFqbn()
          .equals(other.getFqbn())) return false;
      if (!getSketchPath()
          .equals(other.getSketchPath())) return false;
      if (getShowProperties()
          != other.getShowProperties()) return false;
      if (getPreprocess()
          != other.getPreprocess()) return false;
      if (!getBuildCachePath()
          .equals(other.getBuildCachePath())) return false;
      if (!getBuildPath()
          .equals(other.getBuildPath())) return false;
      if (!getBuildPropertiesList()
          .equals(other.getBuildPropertiesList())) return false;
      if (!getWarnings()
          .equals(other.getWarnings())) return false;
      if (getVerbose()
          != other.getVerbose()) return false;
      if (getQuiet()
          != other.getQuiet()) return false;
      if (!getVidPid()
          .equals(other.getVidPid())) return false;
      if (!getExportFile()
          .equals(other.getExportFile())) return false;
      if (getJobs()
          != other.getJobs()) return false;
      if (!getLibrariesList()
          .equals(other.getLibrariesList())) return false;
      if (getOptimizeForDebug()
          != other.getOptimizeForDebug()) return false;
      if (getDryRun()
          != other.getDryRun()) return false;
      if (!getExportDir()
          .equals(other.getExportDir())) return false;
      if (!getProgrammer()
          .equals(other.getProgrammer())) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      if (hasInstance()) {
        hash = (37 * hash) + INSTANCE_FIELD_NUMBER;
        hash = (53 * hash) + getInstance().hashCode();
      }
      hash = (37 * hash) + FQBN_FIELD_NUMBER;
      hash = (53 * hash) + getFqbn().hashCode();
      hash = (37 * hash) + SKETCHPATH_FIELD_NUMBER;
      hash = (53 * hash) + getSketchPath().hashCode();
      hash = (37 * hash) + SHOWPROPERTIES_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getShowProperties());
      hash = (37 * hash) + PREPROCESS_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getPreprocess());
      hash = (37 * hash) + BUILDCACHEPATH_FIELD_NUMBER;
      hash = (53 * hash) + getBuildCachePath().hashCode();
      hash = (37 * hash) + BUILDPATH_FIELD_NUMBER;
      hash = (53 * hash) + getBuildPath().hashCode();
      if (getBuildPropertiesCount() > 0) {
        hash = (37 * hash) + BUILDPROPERTIES_FIELD_NUMBER;
        hash = (53 * hash) + getBuildPropertiesList().hashCode();
      }
      hash = (37 * hash) + WARNINGS_FIELD_NUMBER;
      hash = (53 * hash) + getWarnings().hashCode();
      hash = (37 * hash) + VERBOSE_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getVerbose());
      hash = (37 * hash) + QUIET_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getQuiet());
      hash = (37 * hash) + VIDPID_FIELD_NUMBER;
      hash = (53 * hash) + getVidPid().hashCode();
      hash = (37 * hash) + EXPORTFILE_FIELD_NUMBER;
      hash = (53 * hash) + getExportFile().hashCode();
      hash = (37 * hash) + JOBS_FIELD_NUMBER;
      hash = (53 * hash) + getJobs();
      if (getLibrariesCount() > 0) {
        hash = (37 * hash) + LIBRARIES_FIELD_NUMBER;
        hash = (53 * hash) + getLibrariesList().hashCode();
      }
      hash = (37 * hash) + OPTIMIZEFORDEBUG_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getOptimizeForDebug());
      hash = (37 * hash) + DRYRUN_FIELD_NUMBER;
      hash = (53 * hash) + com.google.protobuf.Internal.hashBoolean(
          getDryRun());
      hash = (37 * hash) + EXPORT_DIR_FIELD_NUMBER;
      hash = (53 * hash) + getExportDir().hashCode();
      hash = (37 * hash) + PROGRAMMER_FIELD_NUMBER;
      hash = (53 * hash) + getProgrammer().hashCode();
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileReq parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cc.arduino.cli.commands.Compile.CompileReq prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cc.arduino.cli.commands.CompileReq}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cc.arduino.cli.commands.CompileReq)
        cc.arduino.cli.commands.Compile.CompileReqOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileReq_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileReq_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cc.arduino.cli.commands.Compile.CompileReq.class, cc.arduino.cli.commands.Compile.CompileReq.Builder.class);
      }

      // Construct using cc.arduino.cli.commands.Compile.CompileReq.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        if (instanceBuilder_ == null) {
          instance_ = null;
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }
        fqbn_ = "";

        sketchPath_ = "";

        showProperties_ = false;

        preprocess_ = false;

        buildCachePath_ = "";

        buildPath_ = "";

        buildProperties_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        warnings_ = "";

        verbose_ = false;

        quiet_ = false;

        vidPid_ = "";

        exportFile_ = "";

        jobs_ = 0;

        libraries_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        optimizeForDebug_ = false;

        dryRun_ = false;

        exportDir_ = "";

        programmer_ = "";

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileReq_descriptor;
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileReq getDefaultInstanceForType() {
        return cc.arduino.cli.commands.Compile.CompileReq.getDefaultInstance();
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileReq build() {
        cc.arduino.cli.commands.Compile.CompileReq result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileReq buildPartial() {
        cc.arduino.cli.commands.Compile.CompileReq result = new cc.arduino.cli.commands.Compile.CompileReq(this);
        int from_bitField0_ = bitField0_;
        if (instanceBuilder_ == null) {
          result.instance_ = instance_;
        } else {
          result.instance_ = instanceBuilder_.build();
        }
        result.fqbn_ = fqbn_;
        result.sketchPath_ = sketchPath_;
        result.showProperties_ = showProperties_;
        result.preprocess_ = preprocess_;
        result.buildCachePath_ = buildCachePath_;
        result.buildPath_ = buildPath_;
        if (((bitField0_ & 0x00000001) != 0)) {
          buildProperties_ = buildProperties_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000001);
        }
        result.buildProperties_ = buildProperties_;
        result.warnings_ = warnings_;
        result.verbose_ = verbose_;
        result.quiet_ = quiet_;
        result.vidPid_ = vidPid_;
        result.exportFile_ = exportFile_;
        result.jobs_ = jobs_;
        if (((bitField0_ & 0x00000002) != 0)) {
          libraries_ = libraries_.getUnmodifiableView();
          bitField0_ = (bitField0_ & ~0x00000002);
        }
        result.libraries_ = libraries_;
        result.optimizeForDebug_ = optimizeForDebug_;
        result.dryRun_ = dryRun_;
        result.exportDir_ = exportDir_;
        result.programmer_ = programmer_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cc.arduino.cli.commands.Compile.CompileReq) {
          return mergeFrom((cc.arduino.cli.commands.Compile.CompileReq)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cc.arduino.cli.commands.Compile.CompileReq other) {
        if (other == cc.arduino.cli.commands.Compile.CompileReq.getDefaultInstance()) return this;
        if (other.hasInstance()) {
          mergeInstance(other.getInstance());
        }
        if (!other.getFqbn().isEmpty()) {
          fqbn_ = other.fqbn_;
          onChanged();
        }
        if (!other.getSketchPath().isEmpty()) {
          sketchPath_ = other.sketchPath_;
          onChanged();
        }
        if (other.getShowProperties() != false) {
          setShowProperties(other.getShowProperties());
        }
        if (other.getPreprocess() != false) {
          setPreprocess(other.getPreprocess());
        }
        if (!other.getBuildCachePath().isEmpty()) {
          buildCachePath_ = other.buildCachePath_;
          onChanged();
        }
        if (!other.getBuildPath().isEmpty()) {
          buildPath_ = other.buildPath_;
          onChanged();
        }
        if (!other.buildProperties_.isEmpty()) {
          if (buildProperties_.isEmpty()) {
            buildProperties_ = other.buildProperties_;
            bitField0_ = (bitField0_ & ~0x00000001);
          } else {
            ensureBuildPropertiesIsMutable();
            buildProperties_.addAll(other.buildProperties_);
          }
          onChanged();
        }
        if (!other.getWarnings().isEmpty()) {
          warnings_ = other.warnings_;
          onChanged();
        }
        if (other.getVerbose() != false) {
          setVerbose(other.getVerbose());
        }
        if (other.getQuiet() != false) {
          setQuiet(other.getQuiet());
        }
        if (!other.getVidPid().isEmpty()) {
          vidPid_ = other.vidPid_;
          onChanged();
        }
        if (!other.getExportFile().isEmpty()) {
          exportFile_ = other.exportFile_;
          onChanged();
        }
        if (other.getJobs() != 0) {
          setJobs(other.getJobs());
        }
        if (!other.libraries_.isEmpty()) {
          if (libraries_.isEmpty()) {
            libraries_ = other.libraries_;
            bitField0_ = (bitField0_ & ~0x00000002);
          } else {
            ensureLibrariesIsMutable();
            libraries_.addAll(other.libraries_);
          }
          onChanged();
        }
        if (other.getOptimizeForDebug() != false) {
          setOptimizeForDebug(other.getOptimizeForDebug());
        }
        if (other.getDryRun() != false) {
          setDryRun(other.getDryRun());
        }
        if (!other.getExportDir().isEmpty()) {
          exportDir_ = other.exportDir_;
          onChanged();
        }
        if (!other.getProgrammer().isEmpty()) {
          programmer_ = other.programmer_;
          onChanged();
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cc.arduino.cli.commands.Compile.CompileReq parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cc.arduino.cli.commands.Compile.CompileReq) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private cc.arduino.cli.commands.Common.Instance instance_;
      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.commands.Common.Instance, cc.arduino.cli.commands.Common.Instance.Builder, cc.arduino.cli.commands.Common.InstanceOrBuilder> instanceBuilder_;
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       * @return Whether the instance field is set.
       */
      public boolean hasInstance() {
        return instanceBuilder_ != null || instance_ != null;
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       * @return The instance.
       */
      public cc.arduino.cli.commands.Common.Instance getInstance() {
        if (instanceBuilder_ == null) {
          return instance_ == null ? cc.arduino.cli.commands.Common.Instance.getDefaultInstance() : instance_;
        } else {
          return instanceBuilder_.getMessage();
        }
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public Builder setInstance(cc.arduino.cli.commands.Common.Instance value) {
        if (instanceBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          instance_ = value;
          onChanged();
        } else {
          instanceBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public Builder setInstance(
          cc.arduino.cli.commands.Common.Instance.Builder builderForValue) {
        if (instanceBuilder_ == null) {
          instance_ = builderForValue.build();
          onChanged();
        } else {
          instanceBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public Builder mergeInstance(cc.arduino.cli.commands.Common.Instance value) {
        if (instanceBuilder_ == null) {
          if (instance_ != null) {
            instance_ =
              cc.arduino.cli.commands.Common.Instance.newBuilder(instance_).mergeFrom(value).buildPartial();
          } else {
            instance_ = value;
          }
          onChanged();
        } else {
          instanceBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public Builder clearInstance() {
        if (instanceBuilder_ == null) {
          instance_ = null;
          onChanged();
        } else {
          instance_ = null;
          instanceBuilder_ = null;
        }

        return this;
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public cc.arduino.cli.commands.Common.Instance.Builder getInstanceBuilder() {
        
        onChanged();
        return getInstanceFieldBuilder().getBuilder();
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      public cc.arduino.cli.commands.Common.InstanceOrBuilder getInstanceOrBuilder() {
        if (instanceBuilder_ != null) {
          return instanceBuilder_.getMessageOrBuilder();
        } else {
          return instance_ == null ?
              cc.arduino.cli.commands.Common.Instance.getDefaultInstance() : instance_;
        }
      }
      /**
       * <pre>
       * Arduino Core Service instance from the `Init` response.
       * </pre>
       *
       * <code>.cc.arduino.cli.commands.Instance instance = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.commands.Common.Instance, cc.arduino.cli.commands.Common.Instance.Builder, cc.arduino.cli.commands.Common.InstanceOrBuilder> 
          getInstanceFieldBuilder() {
        if (instanceBuilder_ == null) {
          instanceBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cc.arduino.cli.commands.Common.Instance, cc.arduino.cli.commands.Common.Instance.Builder, cc.arduino.cli.commands.Common.InstanceOrBuilder>(
                  getInstance(),
                  getParentForChildren(),
                  isClean());
          instance_ = null;
        }
        return instanceBuilder_;
      }

      private java.lang.Object fqbn_ = "";
      /**
       * <pre>
       * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
       * </pre>
       *
       * <code>string fqbn = 2;</code>
       * @return The fqbn.
       */
      public java.lang.String getFqbn() {
        java.lang.Object ref = fqbn_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          fqbn_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
       * </pre>
       *
       * <code>string fqbn = 2;</code>
       * @return The bytes for fqbn.
       */
      public com.google.protobuf.ByteString
          getFqbnBytes() {
        java.lang.Object ref = fqbn_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          fqbn_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
       * </pre>
       *
       * <code>string fqbn = 2;</code>
       * @param value The fqbn to set.
       * @return This builder for chaining.
       */
      public Builder setFqbn(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        fqbn_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
       * </pre>
       *
       * <code>string fqbn = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearFqbn() {
        
        fqbn_ = getDefaultInstance().getFqbn();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Fully Qualified Board Name, e.g.: `arduino:avr:uno`. If this field is not defined, the FQBN of the board attached to the sketch via the `BoardAttach` method is used.
       * </pre>
       *
       * <code>string fqbn = 2;</code>
       * @param value The bytes for fqbn to set.
       * @return This builder for chaining.
       */
      public Builder setFqbnBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        fqbn_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object sketchPath_ = "";
      /**
       * <pre>
       * The path where the sketch is stored.
       * </pre>
       *
       * <code>string sketchPath = 3;</code>
       * @return The sketchPath.
       */
      public java.lang.String getSketchPath() {
        java.lang.Object ref = sketchPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          sketchPath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * The path where the sketch is stored.
       * </pre>
       *
       * <code>string sketchPath = 3;</code>
       * @return The bytes for sketchPath.
       */
      public com.google.protobuf.ByteString
          getSketchPathBytes() {
        java.lang.Object ref = sketchPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          sketchPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * The path where the sketch is stored.
       * </pre>
       *
       * <code>string sketchPath = 3;</code>
       * @param value The sketchPath to set.
       * @return This builder for chaining.
       */
      public Builder setSketchPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        sketchPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The path where the sketch is stored.
       * </pre>
       *
       * <code>string sketchPath = 3;</code>
       * @return This builder for chaining.
       */
      public Builder clearSketchPath() {
        
        sketchPath_ = getDefaultInstance().getSketchPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The path where the sketch is stored.
       * </pre>
       *
       * <code>string sketchPath = 3;</code>
       * @param value The bytes for sketchPath to set.
       * @return This builder for chaining.
       */
      public Builder setSketchPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        sketchPath_ = value;
        onChanged();
        return this;
      }

      private boolean showProperties_ ;
      /**
       * <pre>
       * Show all build preferences used instead of compiling.
       * </pre>
       *
       * <code>bool showProperties = 4;</code>
       * @return The showProperties.
       */
      public boolean getShowProperties() {
        return showProperties_;
      }
      /**
       * <pre>
       * Show all build preferences used instead of compiling.
       * </pre>
       *
       * <code>bool showProperties = 4;</code>
       * @param value The showProperties to set.
       * @return This builder for chaining.
       */
      public Builder setShowProperties(boolean value) {
        
        showProperties_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Show all build preferences used instead of compiling.
       * </pre>
       *
       * <code>bool showProperties = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearShowProperties() {
        
        showProperties_ = false;
        onChanged();
        return this;
      }

      private boolean preprocess_ ;
      /**
       * <pre>
       * Print preprocessed code to stdout instead of compiling.
       * </pre>
       *
       * <code>bool preprocess = 5;</code>
       * @return The preprocess.
       */
      public boolean getPreprocess() {
        return preprocess_;
      }
      /**
       * <pre>
       * Print preprocessed code to stdout instead of compiling.
       * </pre>
       *
       * <code>bool preprocess = 5;</code>
       * @param value The preprocess to set.
       * @return This builder for chaining.
       */
      public Builder setPreprocess(boolean value) {
        
        preprocess_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Print preprocessed code to stdout instead of compiling.
       * </pre>
       *
       * <code>bool preprocess = 5;</code>
       * @return This builder for chaining.
       */
      public Builder clearPreprocess() {
        
        preprocess_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object buildCachePath_ = "";
      /**
       * <pre>
       * Builds of 'core.a' are saved into this path to be cached and reused.
       * </pre>
       *
       * <code>string buildCachePath = 6;</code>
       * @return The buildCachePath.
       */
      public java.lang.String getBuildCachePath() {
        java.lang.Object ref = buildCachePath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          buildCachePath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Builds of 'core.a' are saved into this path to be cached and reused.
       * </pre>
       *
       * <code>string buildCachePath = 6;</code>
       * @return The bytes for buildCachePath.
       */
      public com.google.protobuf.ByteString
          getBuildCachePathBytes() {
        java.lang.Object ref = buildCachePath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          buildCachePath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Builds of 'core.a' are saved into this path to be cached and reused.
       * </pre>
       *
       * <code>string buildCachePath = 6;</code>
       * @param value The buildCachePath to set.
       * @return This builder for chaining.
       */
      public Builder setBuildCachePath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        buildCachePath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Builds of 'core.a' are saved into this path to be cached and reused.
       * </pre>
       *
       * <code>string buildCachePath = 6;</code>
       * @return This builder for chaining.
       */
      public Builder clearBuildCachePath() {
        
        buildCachePath_ = getDefaultInstance().getBuildCachePath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Builds of 'core.a' are saved into this path to be cached and reused.
       * </pre>
       *
       * <code>string buildCachePath = 6;</code>
       * @param value The bytes for buildCachePath to set.
       * @return This builder for chaining.
       */
      public Builder setBuildCachePathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        buildCachePath_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object buildPath_ = "";
      /**
       * <pre>
       * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
       * </pre>
       *
       * <code>string buildPath = 7;</code>
       * @return The buildPath.
       */
      public java.lang.String getBuildPath() {
        java.lang.Object ref = buildPath_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          buildPath_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
       * </pre>
       *
       * <code>string buildPath = 7;</code>
       * @return The bytes for buildPath.
       */
      public com.google.protobuf.ByteString
          getBuildPathBytes() {
        java.lang.Object ref = buildPath_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          buildPath_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
       * </pre>
       *
       * <code>string buildPath = 7;</code>
       * @param value The buildPath to set.
       * @return This builder for chaining.
       */
      public Builder setBuildPath(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        buildPath_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
       * </pre>
       *
       * <code>string buildPath = 7;</code>
       * @return This builder for chaining.
       */
      public Builder clearBuildPath() {
        
        buildPath_ = getDefaultInstance().getBuildPath();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Path to use to store the files used for the compilation. If omitted, a directory will be created in the operating system's default temporary path.
       * </pre>
       *
       * <code>string buildPath = 7;</code>
       * @param value The bytes for buildPath to set.
       * @return This builder for chaining.
       */
      public Builder setBuildPathBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        buildPath_ = value;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList buildProperties_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureBuildPropertiesIsMutable() {
        if (!((bitField0_ & 0x00000001) != 0)) {
          buildProperties_ = new com.google.protobuf.LazyStringArrayList(buildProperties_);
          bitField0_ |= 0x00000001;
         }
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @return A list containing the buildProperties.
       */
      public com.google.protobuf.ProtocolStringList
          getBuildPropertiesList() {
        return buildProperties_.getUnmodifiableView();
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @return The count of buildProperties.
       */
      public int getBuildPropertiesCount() {
        return buildProperties_.size();
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param index The index of the element to return.
       * @return The buildProperties at the given index.
       */
      public java.lang.String getBuildProperties(int index) {
        return buildProperties_.get(index);
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param index The index of the value to return.
       * @return The bytes of the buildProperties at the given index.
       */
      public com.google.protobuf.ByteString
          getBuildPropertiesBytes(int index) {
        return buildProperties_.getByteString(index);
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param index The index to set the value at.
       * @param value The buildProperties to set.
       * @return This builder for chaining.
       */
      public Builder setBuildProperties(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBuildPropertiesIsMutable();
        buildProperties_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param value The buildProperties to add.
       * @return This builder for chaining.
       */
      public Builder addBuildProperties(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureBuildPropertiesIsMutable();
        buildProperties_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param values The buildProperties to add.
       * @return This builder for chaining.
       */
      public Builder addAllBuildProperties(
          java.lang.Iterable<java.lang.String> values) {
        ensureBuildPropertiesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, buildProperties_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @return This builder for chaining.
       */
      public Builder clearBuildProperties() {
        buildProperties_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000001);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom build properties separated by commas.
       * </pre>
       *
       * <code>repeated string buildProperties = 8;</code>
       * @param value The bytes of the buildProperties to add.
       * @return This builder for chaining.
       */
      public Builder addBuildPropertiesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureBuildPropertiesIsMutable();
        buildProperties_.add(value);
        onChanged();
        return this;
      }

      private java.lang.Object warnings_ = "";
      /**
       * <pre>
       * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
       * </pre>
       *
       * <code>string warnings = 9;</code>
       * @return The warnings.
       */
      public java.lang.String getWarnings() {
        java.lang.Object ref = warnings_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          warnings_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
       * </pre>
       *
       * <code>string warnings = 9;</code>
       * @return The bytes for warnings.
       */
      public com.google.protobuf.ByteString
          getWarningsBytes() {
        java.lang.Object ref = warnings_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          warnings_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
       * </pre>
       *
       * <code>string warnings = 9;</code>
       * @param value The warnings to set.
       * @return This builder for chaining.
       */
      public Builder setWarnings(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        warnings_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
       * </pre>
       *
       * <code>string warnings = 9;</code>
       * @return This builder for chaining.
       */
      public Builder clearWarnings() {
        
        warnings_ = getDefaultInstance().getWarnings();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Used to tell gcc which warning level to use. The level names are: "none", "default", "more" and "all".
       * </pre>
       *
       * <code>string warnings = 9;</code>
       * @param value The bytes for warnings to set.
       * @return This builder for chaining.
       */
      public Builder setWarningsBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        warnings_ = value;
        onChanged();
        return this;
      }

      private boolean verbose_ ;
      /**
       * <pre>
       * Turns on verbose mode.
       * </pre>
       *
       * <code>bool verbose = 10;</code>
       * @return The verbose.
       */
      public boolean getVerbose() {
        return verbose_;
      }
      /**
       * <pre>
       * Turns on verbose mode.
       * </pre>
       *
       * <code>bool verbose = 10;</code>
       * @param value The verbose to set.
       * @return This builder for chaining.
       */
      public Builder setVerbose(boolean value) {
        
        verbose_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Turns on verbose mode.
       * </pre>
       *
       * <code>bool verbose = 10;</code>
       * @return This builder for chaining.
       */
      public Builder clearVerbose() {
        
        verbose_ = false;
        onChanged();
        return this;
      }

      private boolean quiet_ ;
      /**
       * <pre>
       * Suppresses almost every output.
       * </pre>
       *
       * <code>bool quiet = 11;</code>
       * @return The quiet.
       */
      public boolean getQuiet() {
        return quiet_;
      }
      /**
       * <pre>
       * Suppresses almost every output.
       * </pre>
       *
       * <code>bool quiet = 11;</code>
       * @param value The quiet to set.
       * @return This builder for chaining.
       */
      public Builder setQuiet(boolean value) {
        
        quiet_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Suppresses almost every output.
       * </pre>
       *
       * <code>bool quiet = 11;</code>
       * @return This builder for chaining.
       */
      public Builder clearQuiet() {
        
        quiet_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object vidPid_ = "";
      /**
       * <pre>
       * VID/PID specific build properties.
       * </pre>
       *
       * <code>string vidPid = 12;</code>
       * @return The vidPid.
       */
      public java.lang.String getVidPid() {
        java.lang.Object ref = vidPid_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          vidPid_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * VID/PID specific build properties.
       * </pre>
       *
       * <code>string vidPid = 12;</code>
       * @return The bytes for vidPid.
       */
      public com.google.protobuf.ByteString
          getVidPidBytes() {
        java.lang.Object ref = vidPid_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          vidPid_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * VID/PID specific build properties.
       * </pre>
       *
       * <code>string vidPid = 12;</code>
       * @param value The vidPid to set.
       * @return This builder for chaining.
       */
      public Builder setVidPid(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        vidPid_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * VID/PID specific build properties.
       * </pre>
       *
       * <code>string vidPid = 12;</code>
       * @return This builder for chaining.
       */
      public Builder clearVidPid() {
        
        vidPid_ = getDefaultInstance().getVidPid();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * VID/PID specific build properties.
       * </pre>
       *
       * <code>string vidPid = 12;</code>
       * @param value The bytes for vidPid to set.
       * @return This builder for chaining.
       */
      public Builder setVidPidBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        vidPid_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object exportFile_ = "";
      /**
       * <pre>
       * DEPRECATED: use exportDir instead
       * </pre>
       *
       * <code>string exportFile = 13 [deprecated = true];</code>
       * @return The exportFile.
       */
      @java.lang.Deprecated public java.lang.String getExportFile() {
        java.lang.Object ref = exportFile_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          exportFile_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED: use exportDir instead
       * </pre>
       *
       * <code>string exportFile = 13 [deprecated = true];</code>
       * @return The bytes for exportFile.
       */
      @java.lang.Deprecated public com.google.protobuf.ByteString
          getExportFileBytes() {
        java.lang.Object ref = exportFile_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          exportFile_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * DEPRECATED: use exportDir instead
       * </pre>
       *
       * <code>string exportFile = 13 [deprecated = true];</code>
       * @param value The exportFile to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setExportFile(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        exportFile_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED: use exportDir instead
       * </pre>
       *
       * <code>string exportFile = 13 [deprecated = true];</code>
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder clearExportFile() {
        
        exportFile_ = getDefaultInstance().getExportFile();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * DEPRECATED: use exportDir instead
       * </pre>
       *
       * <code>string exportFile = 13 [deprecated = true];</code>
       * @param value The bytes for exportFile to set.
       * @return This builder for chaining.
       */
      @java.lang.Deprecated public Builder setExportFileBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        exportFile_ = value;
        onChanged();
        return this;
      }

      private int jobs_ ;
      /**
       * <pre>
       * The max number of concurrent compiler instances to run (as `make -jx`). If jobs is set to 0, it will use the number of available CPUs as the maximum.
       * </pre>
       *
       * <code>int32 jobs = 14;</code>
       * @return The jobs.
       */
      public int getJobs() {
        return jobs_;
      }
      /**
       * <pre>
       * The max number of concurrent compiler instances to run (as `make -jx`). If jobs is set to 0, it will use the number of available CPUs as the maximum.
       * </pre>
       *
       * <code>int32 jobs = 14;</code>
       * @param value The jobs to set.
       * @return This builder for chaining.
       */
      public Builder setJobs(int value) {
        
        jobs_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The max number of concurrent compiler instances to run (as `make -jx`). If jobs is set to 0, it will use the number of available CPUs as the maximum.
       * </pre>
       *
       * <code>int32 jobs = 14;</code>
       * @return This builder for chaining.
       */
      public Builder clearJobs() {
        
        jobs_ = 0;
        onChanged();
        return this;
      }

      private com.google.protobuf.LazyStringList libraries_ = com.google.protobuf.LazyStringArrayList.EMPTY;
      private void ensureLibrariesIsMutable() {
        if (!((bitField0_ & 0x00000002) != 0)) {
          libraries_ = new com.google.protobuf.LazyStringArrayList(libraries_);
          bitField0_ |= 0x00000002;
         }
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @return A list containing the libraries.
       */
      public com.google.protobuf.ProtocolStringList
          getLibrariesList() {
        return libraries_.getUnmodifiableView();
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @return The count of libraries.
       */
      public int getLibrariesCount() {
        return libraries_.size();
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param index The index of the element to return.
       * @return The libraries at the given index.
       */
      public java.lang.String getLibraries(int index) {
        return libraries_.get(index);
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param index The index of the value to return.
       * @return The bytes of the libraries at the given index.
       */
      public com.google.protobuf.ByteString
          getLibrariesBytes(int index) {
        return libraries_.getByteString(index);
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param index The index to set the value at.
       * @param value The libraries to set.
       * @return This builder for chaining.
       */
      public Builder setLibraries(
          int index, java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLibrariesIsMutable();
        libraries_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param value The libraries to add.
       * @return This builder for chaining.
       */
      public Builder addLibraries(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  ensureLibrariesIsMutable();
        libraries_.add(value);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param values The libraries to add.
       * @return This builder for chaining.
       */
      public Builder addAllLibraries(
          java.lang.Iterable<java.lang.String> values) {
        ensureLibrariesIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, libraries_);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @return This builder for chaining.
       */
      public Builder clearLibraries() {
        libraries_ = com.google.protobuf.LazyStringArrayList.EMPTY;
        bitField0_ = (bitField0_ & ~0x00000002);
        onChanged();
        return this;
      }
      /**
       * <pre>
       * List of custom libraries paths separated by commas.
       * </pre>
       *
       * <code>repeated string libraries = 15;</code>
       * @param value The bytes of the libraries to add.
       * @return This builder for chaining.
       */
      public Builder addLibrariesBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        ensureLibrariesIsMutable();
        libraries_.add(value);
        onChanged();
        return this;
      }

      private boolean optimizeForDebug_ ;
      /**
       * <pre>
       * Optimize compile output for debug, not for release.
       * </pre>
       *
       * <code>bool optimizeForDebug = 16;</code>
       * @return The optimizeForDebug.
       */
      public boolean getOptimizeForDebug() {
        return optimizeForDebug_;
      }
      /**
       * <pre>
       * Optimize compile output for debug, not for release.
       * </pre>
       *
       * <code>bool optimizeForDebug = 16;</code>
       * @param value The optimizeForDebug to set.
       * @return This builder for chaining.
       */
      public Builder setOptimizeForDebug(boolean value) {
        
        optimizeForDebug_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optimize compile output for debug, not for release.
       * </pre>
       *
       * <code>bool optimizeForDebug = 16;</code>
       * @return This builder for chaining.
       */
      public Builder clearOptimizeForDebug() {
        
        optimizeForDebug_ = false;
        onChanged();
        return this;
      }

      private boolean dryRun_ ;
      /**
       * <pre>
       * When set to `true` the compiled binary will not be copied to the export directory.
       * </pre>
       *
       * <code>bool dryRun = 17;</code>
       * @return The dryRun.
       */
      public boolean getDryRun() {
        return dryRun_;
      }
      /**
       * <pre>
       * When set to `true` the compiled binary will not be copied to the export directory.
       * </pre>
       *
       * <code>bool dryRun = 17;</code>
       * @param value The dryRun to set.
       * @return This builder for chaining.
       */
      public Builder setDryRun(boolean value) {
        
        dryRun_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * When set to `true` the compiled binary will not be copied to the export directory.
       * </pre>
       *
       * <code>bool dryRun = 17;</code>
       * @return This builder for chaining.
       */
      public Builder clearDryRun() {
        
        dryRun_ = false;
        onChanged();
        return this;
      }

      private java.lang.Object exportDir_ = "";
      /**
       * <pre>
       * Optional: save the build artifacts in this directory, the directory must exist.
       * </pre>
       *
       * <code>string export_dir = 18;</code>
       * @return The exportDir.
       */
      public java.lang.String getExportDir() {
        java.lang.Object ref = exportDir_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          exportDir_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * Optional: save the build artifacts in this directory, the directory must exist.
       * </pre>
       *
       * <code>string export_dir = 18;</code>
       * @return The bytes for exportDir.
       */
      public com.google.protobuf.ByteString
          getExportDirBytes() {
        java.lang.Object ref = exportDir_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          exportDir_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * Optional: save the build artifacts in this directory, the directory must exist.
       * </pre>
       *
       * <code>string export_dir = 18;</code>
       * @param value The exportDir to set.
       * @return This builder for chaining.
       */
      public Builder setExportDir(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        exportDir_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional: save the build artifacts in this directory, the directory must exist.
       * </pre>
       *
       * <code>string export_dir = 18;</code>
       * @return This builder for chaining.
       */
      public Builder clearExportDir() {
        
        exportDir_ = getDefaultInstance().getExportDir();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * Optional: save the build artifacts in this directory, the directory must exist.
       * </pre>
       *
       * <code>string export_dir = 18;</code>
       * @param value The bytes for exportDir to set.
       * @return This builder for chaining.
       */
      public Builder setExportDirBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        exportDir_ = value;
        onChanged();
        return this;
      }

      private java.lang.Object programmer_ = "";
      /**
       * <pre>
       * External programmer for upload
       * </pre>
       *
       * <code>string programmer = 19;</code>
       * @return The programmer.
       */
      public java.lang.String getProgrammer() {
        java.lang.Object ref = programmer_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          programmer_ = s;
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <pre>
       * External programmer for upload
       * </pre>
       *
       * <code>string programmer = 19;</code>
       * @return The bytes for programmer.
       */
      public com.google.protobuf.ByteString
          getProgrammerBytes() {
        java.lang.Object ref = programmer_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          programmer_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <pre>
       * External programmer for upload
       * </pre>
       *
       * <code>string programmer = 19;</code>
       * @param value The programmer to set.
       * @return This builder for chaining.
       */
      public Builder setProgrammer(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        programmer_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * External programmer for upload
       * </pre>
       *
       * <code>string programmer = 19;</code>
       * @return This builder for chaining.
       */
      public Builder clearProgrammer() {
        
        programmer_ = getDefaultInstance().getProgrammer();
        onChanged();
        return this;
      }
      /**
       * <pre>
       * External programmer for upload
       * </pre>
       *
       * <code>string programmer = 19;</code>
       * @param value The bytes for programmer to set.
       * @return This builder for chaining.
       */
      public Builder setProgrammerBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
        
        programmer_ = value;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cc.arduino.cli.commands.CompileReq)
    }

    // @@protoc_insertion_point(class_scope:cc.arduino.cli.commands.CompileReq)
    private static final cc.arduino.cli.commands.Compile.CompileReq DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cc.arduino.cli.commands.Compile.CompileReq();
    }

    public static cc.arduino.cli.commands.Compile.CompileReq getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompileReq>
        PARSER = new com.google.protobuf.AbstractParser<CompileReq>() {
      @java.lang.Override
      public CompileReq parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompileReq(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CompileReq> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompileReq> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cc.arduino.cli.commands.Compile.CompileReq getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  public interface CompileRespOrBuilder extends
      // @@protoc_insertion_point(interface_extends:cc.arduino.cli.commands.CompileResp)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <pre>
     * The output of the compilation process.
     * </pre>
     *
     * <code>bytes out_stream = 1;</code>
     * @return The outStream.
     */
    com.google.protobuf.ByteString getOutStream();

    /**
     * <pre>
     * The error output of the compilation process.
     * </pre>
     *
     * <code>bytes err_stream = 2;</code>
     * @return The errStream.
     */
    com.google.protobuf.ByteString getErrStream();

    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     * @return Whether the taskProgress field is set.
     */
    boolean hasTaskProgress();
    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     * @return The taskProgress.
     */
    cc.arduino.cli.commands.Common.TaskProgress getTaskProgress();
    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     */
    cc.arduino.cli.commands.Common.TaskProgressOrBuilder getTaskProgressOrBuilder();

    /**
     * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
     * @return The enum numeric value on the wire for result.
     */
    int getResultValue();
    /**
     * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
     * @return The result.
     */
    cc.arduino.cli.commands.Compile.CompileResult getResult();
  }
  /**
   * Protobuf type {@code cc.arduino.cli.commands.CompileResp}
   */
  public  static final class CompileResp extends
      com.google.protobuf.GeneratedMessageV3 implements
      // @@protoc_insertion_point(message_implements:cc.arduino.cli.commands.CompileResp)
      CompileRespOrBuilder {
  private static final long serialVersionUID = 0L;
    // Use CompileResp.newBuilder() to construct.
    private CompileResp(com.google.protobuf.GeneratedMessageV3.Builder<?> builder) {
      super(builder);
    }
    private CompileResp() {
      outStream_ = com.google.protobuf.ByteString.EMPTY;
      errStream_ = com.google.protobuf.ByteString.EMPTY;
      result_ = 0;
    }

    @java.lang.Override
    @SuppressWarnings({"unused"})
    protected java.lang.Object newInstance(
        UnusedPrivateParameter unused) {
      return new CompileResp();
    }

    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
    getUnknownFields() {
      return this.unknownFields;
    }
    private CompileResp(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      this();
      if (extensionRegistry == null) {
        throw new java.lang.NullPointerException();
      }
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            case 10: {

              outStream_ = input.readBytes();
              break;
            }
            case 18: {

              errStream_ = input.readBytes();
              break;
            }
            case 26: {
              cc.arduino.cli.commands.Common.TaskProgress.Builder subBuilder = null;
              if (taskProgress_ != null) {
                subBuilder = taskProgress_.toBuilder();
              }
              taskProgress_ = input.readMessage(cc.arduino.cli.commands.Common.TaskProgress.parser(), extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(taskProgress_);
                taskProgress_ = subBuilder.buildPartial();
              }

              break;
            }
            case 32: {
              int rawValue = input.readEnum();

              result_ = rawValue;
              break;
            }
            default: {
              if (!parseUnknownField(
                  input, unknownFields, extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileResp_descriptor;
    }

    @java.lang.Override
    protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileResp_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              cc.arduino.cli.commands.Compile.CompileResp.class, cc.arduino.cli.commands.Compile.CompileResp.Builder.class);
    }

    public static final int OUT_STREAM_FIELD_NUMBER = 1;
    private com.google.protobuf.ByteString outStream_;
    /**
     * <pre>
     * The output of the compilation process.
     * </pre>
     *
     * <code>bytes out_stream = 1;</code>
     * @return The outStream.
     */
    public com.google.protobuf.ByteString getOutStream() {
      return outStream_;
    }

    public static final int ERR_STREAM_FIELD_NUMBER = 2;
    private com.google.protobuf.ByteString errStream_;
    /**
     * <pre>
     * The error output of the compilation process.
     * </pre>
     *
     * <code>bytes err_stream = 2;</code>
     * @return The errStream.
     */
    public com.google.protobuf.ByteString getErrStream() {
      return errStream_;
    }

    public static final int TASK_PROGRESS_FIELD_NUMBER = 3;
    private cc.arduino.cli.commands.Common.TaskProgress taskProgress_;
    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     * @return Whether the taskProgress field is set.
     */
    public boolean hasTaskProgress() {
      return taskProgress_ != null;
    }
    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     * @return The taskProgress.
     */
    public cc.arduino.cli.commands.Common.TaskProgress getTaskProgress() {
      return taskProgress_ == null ? cc.arduino.cli.commands.Common.TaskProgress.getDefaultInstance() : taskProgress_;
    }
    /**
     * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
     */
    public cc.arduino.cli.commands.Common.TaskProgressOrBuilder getTaskProgressOrBuilder() {
      return getTaskProgress();
    }

    public static final int RESULT_FIELD_NUMBER = 4;
    private int result_;
    /**
     * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
     * @return The enum numeric value on the wire for result.
     */
    public int getResultValue() {
      return result_;
    }
    /**
     * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
     * @return The result.
     */
    public cc.arduino.cli.commands.Compile.CompileResult getResult() {
      @SuppressWarnings("deprecation")
      cc.arduino.cli.commands.Compile.CompileResult result = cc.arduino.cli.commands.Compile.CompileResult.valueOf(result_);
      return result == null ? cc.arduino.cli.commands.Compile.CompileResult.UNRECOGNIZED : result;
    }

    private byte memoizedIsInitialized = -1;
    @java.lang.Override
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    @java.lang.Override
    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      if (!outStream_.isEmpty()) {
        output.writeBytes(1, outStream_);
      }
      if (!errStream_.isEmpty()) {
        output.writeBytes(2, errStream_);
      }
      if (taskProgress_ != null) {
        output.writeMessage(3, getTaskProgress());
      }
      if (result_ != cc.arduino.cli.commands.Compile.CompileResult.compile_success.getNumber()) {
        output.writeEnum(4, result_);
      }
      unknownFields.writeTo(output);
    }

    @java.lang.Override
    public int getSerializedSize() {
      int size = memoizedSize;
      if (size != -1) return size;

      size = 0;
      if (!outStream_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(1, outStream_);
      }
      if (!errStream_.isEmpty()) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, errStream_);
      }
      if (taskProgress_ != null) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, getTaskProgress());
      }
      if (result_ != cc.arduino.cli.commands.Compile.CompileResult.compile_success.getNumber()) {
        size += com.google.protobuf.CodedOutputStream
          .computeEnumSize(4, result_);
      }
      size += unknownFields.getSerializedSize();
      memoizedSize = size;
      return size;
    }

    @java.lang.Override
    public boolean equals(final java.lang.Object obj) {
      if (obj == this) {
       return true;
      }
      if (!(obj instanceof cc.arduino.cli.commands.Compile.CompileResp)) {
        return super.equals(obj);
      }
      cc.arduino.cli.commands.Compile.CompileResp other = (cc.arduino.cli.commands.Compile.CompileResp) obj;

      if (!getOutStream()
          .equals(other.getOutStream())) return false;
      if (!getErrStream()
          .equals(other.getErrStream())) return false;
      if (hasTaskProgress() != other.hasTaskProgress()) return false;
      if (hasTaskProgress()) {
        if (!getTaskProgress()
            .equals(other.getTaskProgress())) return false;
      }
      if (result_ != other.result_) return false;
      if (!unknownFields.equals(other.unknownFields)) return false;
      return true;
    }

    @java.lang.Override
    public int hashCode() {
      if (memoizedHashCode != 0) {
        return memoizedHashCode;
      }
      int hash = 41;
      hash = (19 * hash) + getDescriptor().hashCode();
      hash = (37 * hash) + OUT_STREAM_FIELD_NUMBER;
      hash = (53 * hash) + getOutStream().hashCode();
      hash = (37 * hash) + ERR_STREAM_FIELD_NUMBER;
      hash = (53 * hash) + getErrStream().hashCode();
      if (hasTaskProgress()) {
        hash = (37 * hash) + TASK_PROGRESS_FIELD_NUMBER;
        hash = (53 * hash) + getTaskProgress().hashCode();
      }
      hash = (37 * hash) + RESULT_FIELD_NUMBER;
      hash = (53 * hash) + result_;
      hash = (29 * hash) + unknownFields.hashCode();
      memoizedHashCode = hash;
      return hash;
    }

    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        java.nio.ByteBuffer data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        java.nio.ByteBuffer data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseDelimitedWithIOException(PARSER, input, extensionRegistry);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input);
    }
    public static cc.arduino.cli.commands.Compile.CompileResp parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return com.google.protobuf.GeneratedMessageV3
          .parseWithIOException(PARSER, input, extensionRegistry);
    }

    @java.lang.Override
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder() {
      return DEFAULT_INSTANCE.toBuilder();
    }
    public static Builder newBuilder(cc.arduino.cli.commands.Compile.CompileResp prototype) {
      return DEFAULT_INSTANCE.toBuilder().mergeFrom(prototype);
    }
    @java.lang.Override
    public Builder toBuilder() {
      return this == DEFAULT_INSTANCE
          ? new Builder() : new Builder().mergeFrom(this);
    }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code cc.arduino.cli.commands.CompileResp}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessageV3.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:cc.arduino.cli.commands.CompileResp)
        cc.arduino.cli.commands.Compile.CompileRespOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileResp_descriptor;
      }

      @java.lang.Override
      protected com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileResp_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                cc.arduino.cli.commands.Compile.CompileResp.class, cc.arduino.cli.commands.Compile.CompileResp.Builder.class);
      }

      // Construct using cc.arduino.cli.commands.Compile.CompileResp.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessageV3.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessageV3
                .alwaysUseFieldBuilders) {
        }
      }
      @java.lang.Override
      public Builder clear() {
        super.clear();
        outStream_ = com.google.protobuf.ByteString.EMPTY;

        errStream_ = com.google.protobuf.ByteString.EMPTY;

        if (taskProgressBuilder_ == null) {
          taskProgress_ = null;
        } else {
          taskProgress_ = null;
          taskProgressBuilder_ = null;
        }
        result_ = 0;

        return this;
      }

      @java.lang.Override
      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return cc.arduino.cli.commands.Compile.internal_static_cc_arduino_cli_commands_CompileResp_descriptor;
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileResp getDefaultInstanceForType() {
        return cc.arduino.cli.commands.Compile.CompileResp.getDefaultInstance();
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileResp build() {
        cc.arduino.cli.commands.Compile.CompileResp result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      @java.lang.Override
      public cc.arduino.cli.commands.Compile.CompileResp buildPartial() {
        cc.arduino.cli.commands.Compile.CompileResp result = new cc.arduino.cli.commands.Compile.CompileResp(this);
        result.outStream_ = outStream_;
        result.errStream_ = errStream_;
        if (taskProgressBuilder_ == null) {
          result.taskProgress_ = taskProgress_;
        } else {
          result.taskProgress_ = taskProgressBuilder_.build();
        }
        result.result_ = result_;
        onBuilt();
        return result;
      }

      @java.lang.Override
      public Builder clone() {
        return super.clone();
      }
      @java.lang.Override
      public Builder setField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.setField(field, value);
      }
      @java.lang.Override
      public Builder clearField(
          com.google.protobuf.Descriptors.FieldDescriptor field) {
        return super.clearField(field);
      }
      @java.lang.Override
      public Builder clearOneof(
          com.google.protobuf.Descriptors.OneofDescriptor oneof) {
        return super.clearOneof(oneof);
      }
      @java.lang.Override
      public Builder setRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          int index, java.lang.Object value) {
        return super.setRepeatedField(field, index, value);
      }
      @java.lang.Override
      public Builder addRepeatedField(
          com.google.protobuf.Descriptors.FieldDescriptor field,
          java.lang.Object value) {
        return super.addRepeatedField(field, value);
      }
      @java.lang.Override
      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof cc.arduino.cli.commands.Compile.CompileResp) {
          return mergeFrom((cc.arduino.cli.commands.Compile.CompileResp)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(cc.arduino.cli.commands.Compile.CompileResp other) {
        if (other == cc.arduino.cli.commands.Compile.CompileResp.getDefaultInstance()) return this;
        if (other.getOutStream() != com.google.protobuf.ByteString.EMPTY) {
          setOutStream(other.getOutStream());
        }
        if (other.getErrStream() != com.google.protobuf.ByteString.EMPTY) {
          setErrStream(other.getErrStream());
        }
        if (other.hasTaskProgress()) {
          mergeTaskProgress(other.getTaskProgress());
        }
        if (other.result_ != 0) {
          setResultValue(other.getResultValue());
        }
        this.mergeUnknownFields(other.unknownFields);
        onChanged();
        return this;
      }

      @java.lang.Override
      public final boolean isInitialized() {
        return true;
      }

      @java.lang.Override
      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        cc.arduino.cli.commands.Compile.CompileResp parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (cc.arduino.cli.commands.Compile.CompileResp) e.getUnfinishedMessage();
          throw e.unwrapIOException();
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }

      private com.google.protobuf.ByteString outStream_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The output of the compilation process.
       * </pre>
       *
       * <code>bytes out_stream = 1;</code>
       * @return The outStream.
       */
      public com.google.protobuf.ByteString getOutStream() {
        return outStream_;
      }
      /**
       * <pre>
       * The output of the compilation process.
       * </pre>
       *
       * <code>bytes out_stream = 1;</code>
       * @param value The outStream to set.
       * @return This builder for chaining.
       */
      public Builder setOutStream(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        outStream_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The output of the compilation process.
       * </pre>
       *
       * <code>bytes out_stream = 1;</code>
       * @return This builder for chaining.
       */
      public Builder clearOutStream() {
        
        outStream_ = getDefaultInstance().getOutStream();
        onChanged();
        return this;
      }

      private com.google.protobuf.ByteString errStream_ = com.google.protobuf.ByteString.EMPTY;
      /**
       * <pre>
       * The error output of the compilation process.
       * </pre>
       *
       * <code>bytes err_stream = 2;</code>
       * @return The errStream.
       */
      public com.google.protobuf.ByteString getErrStream() {
        return errStream_;
      }
      /**
       * <pre>
       * The error output of the compilation process.
       * </pre>
       *
       * <code>bytes err_stream = 2;</code>
       * @param value The errStream to set.
       * @return This builder for chaining.
       */
      public Builder setErrStream(com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  
        errStream_ = value;
        onChanged();
        return this;
      }
      /**
       * <pre>
       * The error output of the compilation process.
       * </pre>
       *
       * <code>bytes err_stream = 2;</code>
       * @return This builder for chaining.
       */
      public Builder clearErrStream() {
        
        errStream_ = getDefaultInstance().getErrStream();
        onChanged();
        return this;
      }

      private cc.arduino.cli.commands.Common.TaskProgress taskProgress_;
      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.commands.Common.TaskProgress, cc.arduino.cli.commands.Common.TaskProgress.Builder, cc.arduino.cli.commands.Common.TaskProgressOrBuilder> taskProgressBuilder_;
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       * @return Whether the taskProgress field is set.
       */
      public boolean hasTaskProgress() {
        return taskProgressBuilder_ != null || taskProgress_ != null;
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       * @return The taskProgress.
       */
      public cc.arduino.cli.commands.Common.TaskProgress getTaskProgress() {
        if (taskProgressBuilder_ == null) {
          return taskProgress_ == null ? cc.arduino.cli.commands.Common.TaskProgress.getDefaultInstance() : taskProgress_;
        } else {
          return taskProgressBuilder_.getMessage();
        }
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public Builder setTaskProgress(cc.arduino.cli.commands.Common.TaskProgress value) {
        if (taskProgressBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          taskProgress_ = value;
          onChanged();
        } else {
          taskProgressBuilder_.setMessage(value);
        }

        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public Builder setTaskProgress(
          cc.arduino.cli.commands.Common.TaskProgress.Builder builderForValue) {
        if (taskProgressBuilder_ == null) {
          taskProgress_ = builderForValue.build();
          onChanged();
        } else {
          taskProgressBuilder_.setMessage(builderForValue.build());
        }

        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public Builder mergeTaskProgress(cc.arduino.cli.commands.Common.TaskProgress value) {
        if (taskProgressBuilder_ == null) {
          if (taskProgress_ != null) {
            taskProgress_ =
              cc.arduino.cli.commands.Common.TaskProgress.newBuilder(taskProgress_).mergeFrom(value).buildPartial();
          } else {
            taskProgress_ = value;
          }
          onChanged();
        } else {
          taskProgressBuilder_.mergeFrom(value);
        }

        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public Builder clearTaskProgress() {
        if (taskProgressBuilder_ == null) {
          taskProgress_ = null;
          onChanged();
        } else {
          taskProgress_ = null;
          taskProgressBuilder_ = null;
        }

        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public cc.arduino.cli.commands.Common.TaskProgress.Builder getTaskProgressBuilder() {
        
        onChanged();
        return getTaskProgressFieldBuilder().getBuilder();
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      public cc.arduino.cli.commands.Common.TaskProgressOrBuilder getTaskProgressOrBuilder() {
        if (taskProgressBuilder_ != null) {
          return taskProgressBuilder_.getMessageOrBuilder();
        } else {
          return taskProgress_ == null ?
              cc.arduino.cli.commands.Common.TaskProgress.getDefaultInstance() : taskProgress_;
        }
      }
      /**
       * <code>.cc.arduino.cli.commands.TaskProgress task_progress = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilderV3<
          cc.arduino.cli.commands.Common.TaskProgress, cc.arduino.cli.commands.Common.TaskProgress.Builder, cc.arduino.cli.commands.Common.TaskProgressOrBuilder> 
          getTaskProgressFieldBuilder() {
        if (taskProgressBuilder_ == null) {
          taskProgressBuilder_ = new com.google.protobuf.SingleFieldBuilderV3<
              cc.arduino.cli.commands.Common.TaskProgress, cc.arduino.cli.commands.Common.TaskProgress.Builder, cc.arduino.cli.commands.Common.TaskProgressOrBuilder>(
                  getTaskProgress(),
                  getParentForChildren(),
                  isClean());
          taskProgress_ = null;
        }
        return taskProgressBuilder_;
      }

      private int result_ = 0;
      /**
       * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
       * @return The enum numeric value on the wire for result.
       */
      public int getResultValue() {
        return result_;
      }
      /**
       * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
       * @param value The enum numeric value on the wire for result to set.
       * @return This builder for chaining.
       */
      public Builder setResultValue(int value) {
        result_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
       * @return The result.
       */
      public cc.arduino.cli.commands.Compile.CompileResult getResult() {
        @SuppressWarnings("deprecation")
        cc.arduino.cli.commands.Compile.CompileResult result = cc.arduino.cli.commands.Compile.CompileResult.valueOf(result_);
        return result == null ? cc.arduino.cli.commands.Compile.CompileResult.UNRECOGNIZED : result;
      }
      /**
       * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
       * @param value The result to set.
       * @return This builder for chaining.
       */
      public Builder setResult(cc.arduino.cli.commands.Compile.CompileResult value) {
        if (value == null) {
          throw new NullPointerException();
        }
        
        result_ = value.getNumber();
        onChanged();
        return this;
      }
      /**
       * <code>.cc.arduino.cli.commands.CompileResult result = 4;</code>
       * @return This builder for chaining.
       */
      public Builder clearResult() {
        
        result_ = 0;
        onChanged();
        return this;
      }
      @java.lang.Override
      public final Builder setUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.setUnknownFields(unknownFields);
      }

      @java.lang.Override
      public final Builder mergeUnknownFields(
          final com.google.protobuf.UnknownFieldSet unknownFields) {
        return super.mergeUnknownFields(unknownFields);
      }


      // @@protoc_insertion_point(builder_scope:cc.arduino.cli.commands.CompileResp)
    }

    // @@protoc_insertion_point(class_scope:cc.arduino.cli.commands.CompileResp)
    private static final cc.arduino.cli.commands.Compile.CompileResp DEFAULT_INSTANCE;
    static {
      DEFAULT_INSTANCE = new cc.arduino.cli.commands.Compile.CompileResp();
    }

    public static cc.arduino.cli.commands.Compile.CompileResp getDefaultInstance() {
      return DEFAULT_INSTANCE;
    }

    private static final com.google.protobuf.Parser<CompileResp>
        PARSER = new com.google.protobuf.AbstractParser<CompileResp>() {
      @java.lang.Override
      public CompileResp parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new CompileResp(input, extensionRegistry);
      }
    };

    public static com.google.protobuf.Parser<CompileResp> parser() {
      return PARSER;
    }

    @java.lang.Override
    public com.google.protobuf.Parser<CompileResp> getParserForType() {
      return PARSER;
    }

    @java.lang.Override
    public cc.arduino.cli.commands.Compile.CompileResp getDefaultInstanceForType() {
      return DEFAULT_INSTANCE;
    }

  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cc_arduino_cli_commands_CompileReq_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cc_arduino_cli_commands_CompileReq_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_cc_arduino_cli_commands_CompileResp_descriptor;
  private static final 
    com.google.protobuf.GeneratedMessageV3.FieldAccessorTable
      internal_static_cc_arduino_cli_commands_CompileResp_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static  com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\026commands/compile.proto\022\027cc.arduino.cli" +
      ".commands\032\025commands/common.proto\"\240\003\n\nCom" +
      "pileReq\0223\n\010instance\030\001 \001(\0132!.cc.arduino.c" +
      "li.commands.Instance\022\014\n\004fqbn\030\002 \001(\t\022\022\n\nsk" +
      "etchPath\030\003 \001(\t\022\026\n\016showProperties\030\004 \001(\010\022\022" +
      "\n\npreprocess\030\005 \001(\010\022\026\n\016buildCachePath\030\006 \001" +
      "(\t\022\021\n\tbuildPath\030\007 \001(\t\022\027\n\017buildProperties" +
      "\030\010 \003(\t\022\020\n\010warnings\030\t \001(\t\022\017\n\007verbose\030\n \001(" +
      "\010\022\r\n\005quiet\030\013 \001(\010\022\016\n\006vidPid\030\014 \001(\t\022\026\n\nexpo" +
      "rtFile\030\r \001(\tB\002\030\001\022\014\n\004jobs\030\016 \001(\005\022\021\n\tlibrar" +
      "ies\030\017 \003(\t\022\030\n\020optimizeForDebug\030\020 \001(\010\022\016\n\006d" +
      "ryRun\030\021 \001(\010\022\022\n\nexport_dir\030\022 \001(\t\022\022\n\nprogr" +
      "ammer\030\023 \001(\t\"\253\001\n\013CompileResp\022\022\n\nout_strea" +
      "m\030\001 \001(\014\022\022\n\nerr_stream\030\002 \001(\014\022<\n\rtask_prog" +
      "ress\030\003 \001(\0132%.cc.arduino.cli.commands.Tas" +
      "kProgress\0226\n\006result\030\004 \001(\0162&.cc.arduino.c" +
      "li.commands.CompileResult*7\n\rCompileResu" +
      "lt\022\023\n\017compile_success\020\000\022\021\n\rcompile_error" +
      "\020\001B-Z+github.com/arduino/arduino-cli/rpc" +
      "/commandsb\006proto3"
    };
    descriptor = com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
          cc.arduino.cli.commands.Common.getDescriptor(),
        });
    internal_static_cc_arduino_cli_commands_CompileReq_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_cc_arduino_cli_commands_CompileReq_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cc_arduino_cli_commands_CompileReq_descriptor,
        new java.lang.String[] { "Instance", "Fqbn", "SketchPath", "ShowProperties", "Preprocess", "BuildCachePath", "BuildPath", "BuildProperties", "Warnings", "Verbose", "Quiet", "VidPid", "ExportFile", "Jobs", "Libraries", "OptimizeForDebug", "DryRun", "ExportDir", "Programmer", });
    internal_static_cc_arduino_cli_commands_CompileResp_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_cc_arduino_cli_commands_CompileResp_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessageV3.FieldAccessorTable(
        internal_static_cc_arduino_cli_commands_CompileResp_descriptor,
        new java.lang.String[] { "OutStream", "ErrStream", "TaskProgress", "Result", });
    cc.arduino.cli.commands.Common.getDescriptor();
  }

  // @@protoc_insertion_point(outer_class_scope)
}
